// D Bindings for DirectX
// Ported by Sean Cavanaugh - WorksOnMyMachine@gmail.com

module win32.directx.d3d11;


import win32.directx.dxinternal;
public import win32.directx.dxpublic;
import win32.directx.dxgi;
import win32.directx.d3d11shader;
import win32.windows;
import std.c.windows.com;
import std.string;
import std.utf;


alias std.c.windows.com.IUnknown IUnknown;
alias std.c.windows.com.GUID GUID;
alias std.c.windows.com.IID IID;


version(DXSDK_11_0)
{
    pragma(lib, "d3d11.lib");
}
else version(DXSDK_11_1)
{
    pragma(lib, "d3d11.lib");
}
else
{
    static assert(false, "DirectX SDK version either unsupported or undefined");
}


/////////////////////////
// Sanity checks against canocial sizes from VS2010 C++ test applet

// Enums
static assert(D3D_DRIVER_TYPE.sizeof == 4);
static assert(D3D_FEATURE_LEVEL.sizeof == 4);
static assert(D3D11_INPUT_CLASSIFICATION.sizeof == 4);
static assert(D3D11_FILL_MODE.sizeof == 4);
static assert(D3D11_PRIMITIVE_TOPOLOGY.sizeof == 4);
static assert(D3D11_PRIMITIVE.sizeof == 4);
static assert(D3D11_CULL_MODE.sizeof == 4);
static assert(D3D11_RESOURCE_DIMENSION.sizeof == 4);
static assert(D3D11_SRV_DIMENSION.sizeof == 4);
static assert(D3D11_DSV_DIMENSION.sizeof == 4);
static assert(D3D11_RTV_DIMENSION.sizeof == 4);
static assert(D3D11_UAV_DIMENSION.sizeof == 4);
static assert(D3D11_USAGE.sizeof == 4);
static assert(D3D11_BIND_FLAG.sizeof == 4);
static assert(D3D11_CPU_ACCESS_FLAG.sizeof == 4);
static assert(D3D11_RESOURCE_MISC_FLAG.sizeof == 4);
static assert(D3D11_MAP.sizeof == 4);
static assert(D3D11_MAP_FLAG.sizeof == 4);
static assert(D3D11_RAISE_FLAG.sizeof == 4);
static assert(D3D11_CLEAR_FLAG.sizeof == 4);
static assert(D3D11_COMPARISON_FUNC.sizeof == 4);
static assert(D3D11_DEPTH_WRITE_MASK.sizeof == 4);
static assert(D3D11_STENCIL_OP.sizeof == 4);
static assert(D3D11_BLEND.sizeof == 4);
static assert(D3D11_BLEND_OP.sizeof == 4);
static assert(D3D11_COLOR_WRITE_ENABLE.sizeof == 4);
static assert(D3D11_TEXTURECUBE_FACE.sizeof == 4);
static assert(D3D11_BUFFEREX_SRV_FLAG.sizeof == 4);
static assert(D3D11_DSV_FLAG.sizeof == 4);
static assert(D3D11_BUFFER_UAV_FLAG.sizeof == 4);
static assert(D3D11_FILTER.sizeof == 4);
static assert(D3D11_FILTER_TYPE.sizeof == 4);
static assert(D3D11_TEXTURE_ADDRESS_MODE.sizeof == 4);
static assert(D3D11_FORMAT_SUPPORT.sizeof == 4);
static assert(D3D11_FORMAT_SUPPORT2.sizeof == 4);
static assert(D3D11_ASYNC_GETDATA_FLAG.sizeof == 4);
static assert(D3D11_QUERY.sizeof == 4);
static assert(D3D11_QUERY_MISC_FLAG.sizeof == 4);
static assert(D3D11_COUNTER.sizeof == 4);
static assert(D3D11_COUNTER_TYPE.sizeof == 4);
static assert(D3D11_STANDARD_MULTISAMPLE_QUALITY_LEVELS.sizeof == 4);
static assert(D3D11_DEVICE_CONTEXT_TYPE.sizeof == 4);
static assert(D3D11_FEATURE.sizeof == 4);
static assert(D3D11_CREATE_DEVICE_FLAG.sizeof == 4);

// Structs 
version(X86)
{
static assert(D3D11_INPUT_ELEMENT_DESC.sizeof == 28);
static assert(D3D11_SO_DECLARATION_ENTRY.sizeof == 16);
static assert(D3D11_VIEWPORT.sizeof == 24);
static assert(D3D11_RECT.sizeof == 16);
static assert(D3D11_BOX.sizeof == 24);
static assert(D3D11_DEPTH_STENCILOP_DESC.sizeof == 16);
static assert(D3D11_DEPTH_STENCIL_DESC.sizeof == 52);
static assert(D3D11_RENDER_TARGET_BLEND_DESC.sizeof == 32);
static assert(D3D11_BLEND_DESC.sizeof == 264);
static assert(D3D11_RASTERIZER_DESC.sizeof == 40);
static assert(D3D11_SUBRESOURCE_DATA.sizeof == 12);
static assert(D3D11_MAPPED_SUBRESOURCE.sizeof == 12);
static assert(D3D11_BUFFER_DESC.sizeof == 24);
static assert(D3D11_TEXTURE1D_DESC.sizeof == 32);
static assert(D3D11_TEXTURE2D_DESC.sizeof == 44);
static assert(D3D11_TEXTURE3D_DESC.sizeof == 36);
static assert(D3D11_BUFFER_SRV.sizeof == 8);
static assert(D3D11_BUFFEREX_SRV.sizeof == 12);
static assert(D3D11_TEX1D_SRV.sizeof == 8);
static assert(D3D11_TEX1D_ARRAY_SRV.sizeof == 16);
static assert(D3D11_TEX2D_SRV.sizeof == 8);
static assert(D3D11_TEX2D_ARRAY_SRV.sizeof == 16);
static assert(D3D11_TEX3D_SRV.sizeof == 8);
static assert(D3D11_TEXCUBE_SRV.sizeof == 8);
static assert(D3D11_TEXCUBE_ARRAY_SRV.sizeof == 16);
static assert(D3D11_TEX2DMS_SRV.sizeof == 4);
static assert(D3D11_TEX2DMS_ARRAY_SRV.sizeof == 8);
static assert(D3D11_SHADER_RESOURCE_VIEW_DESC.sizeof == 24);
static assert(D3D11_BUFFER_RTV.sizeof == 8);
static assert(D3D11_TEX1D_RTV.sizeof == 4);
static assert(D3D11_TEX1D_ARRAY_RTV.sizeof == 12);
static assert(D3D11_TEX2D_RTV.sizeof == 4);
static assert(D3D11_TEX2DMS_RTV.sizeof == 4);
static assert(D3D11_TEX2D_ARRAY_RTV.sizeof == 12);
static assert(D3D11_TEX2DMS_ARRAY_RTV.sizeof == 8);
static assert(D3D11_TEX3D_RTV.sizeof == 12);
static assert(D3D11_RENDER_TARGET_VIEW_DESC.sizeof == 20);
static assert(D3D11_TEX1D_DSV.sizeof == 4);
static assert(D3D11_TEX1D_ARRAY_DSV.sizeof == 12);
static assert(D3D11_TEX2D_DSV.sizeof == 4);
static assert(D3D11_TEX2D_ARRAY_DSV.sizeof == 12);
static assert(D3D11_TEX2DMS_DSV.sizeof == 4);
static assert(D3D11_TEX2DMS_ARRAY_DSV.sizeof == 8);
static assert(D3D11_DEPTH_STENCIL_VIEW_DESC.sizeof == 24);
static assert(D3D11_BUFFER_UAV.sizeof == 12);
static assert(D3D11_TEX1D_UAV.sizeof == 4);
static assert(D3D11_TEX1D_ARRAY_UAV.sizeof == 12);
static assert(D3D11_TEX2D_UAV.sizeof == 4);
static assert(D3D11_TEX2D_ARRAY_UAV.sizeof == 12);
static assert(D3D11_TEX3D_UAV.sizeof == 12);
static assert(D3D11_UNORDERED_ACCESS_VIEW_DESC.sizeof == 20);
static assert(D3D11_SAMPLER_DESC.sizeof == 52);
static assert(D3D11_QUERY_DESC.sizeof == 8);
static assert(D3D11_QUERY_DATA_TIMESTAMP_DISJOINT.sizeof == 16);
static assert(D3D11_QUERY_DATA_PIPELINE_STATISTICS.sizeof == 88);
static assert(D3D11_QUERY_DATA_SO_STATISTICS.sizeof == 16);
static assert(D3D11_COUNTER_DESC.sizeof == 8);
static assert(D3D11_COUNTER_INFO.sizeof == 12);
static assert(D3D11_CLASS_INSTANCE_DESC.sizeof == 32);
static assert(D3D11_FEATURE_DATA_THREADING.sizeof == 8);
static assert(D3D11_FEATURE_DATA_DOUBLES.sizeof == 4);
static assert(D3D11_FEATURE_DATA_FORMAT_SUPPORT.sizeof == 8);
static assert(D3D11_FEATURE_DATA_FORMAT_SUPPORT2.sizeof == 8);
static assert(D3D11_FEATURE_DATA_D3D10_X_HARDWARE_OPTIONS.sizeof == 4);
}
version(X86_64)
{
static assert(D3D11_INPUT_ELEMENT_DESC.sizeof == 32);
static assert(D3D11_SO_DECLARATION_ENTRY.sizeof == 24);
static assert(D3D11_VIEWPORT.sizeof == 24);
static assert(D3D11_RECT.sizeof == 16);
static assert(D3D11_BOX.sizeof == 24);
static assert(D3D11_DEPTH_STENCILOP_DESC.sizeof == 16);
static assert(D3D11_DEPTH_STENCIL_DESC.sizeof == 52);
static assert(D3D11_RENDER_TARGET_BLEND_DESC.sizeof == 32);
static assert(D3D11_BLEND_DESC.sizeof == 264);
static assert(D3D11_RASTERIZER_DESC.sizeof == 40);
static assert(D3D11_SUBRESOURCE_DATA.sizeof == 16);
static assert(D3D11_MAPPED_SUBRESOURCE.sizeof == 16);
static assert(D3D11_BUFFER_DESC.sizeof == 24);
static assert(D3D11_TEXTURE1D_DESC.sizeof == 32);
static assert(D3D11_TEXTURE2D_DESC.sizeof == 44);
static assert(D3D11_TEXTURE3D_DESC.sizeof == 36);
static assert(D3D11_BUFFER_SRV.sizeof == 8);
static assert(D3D11_BUFFEREX_SRV.sizeof == 12);
static assert(D3D11_TEX1D_SRV.sizeof == 8);
static assert(D3D11_TEX1D_ARRAY_SRV.sizeof == 16);
static assert(D3D11_TEX2D_SRV.sizeof == 8);
static assert(D3D11_TEX2D_ARRAY_SRV.sizeof == 16);
static assert(D3D11_TEX3D_SRV.sizeof == 8);
static assert(D3D11_TEXCUBE_SRV.sizeof == 8);
static assert(D3D11_TEXCUBE_ARRAY_SRV.sizeof == 16);
static assert(D3D11_TEX2DMS_SRV.sizeof == 4);
static assert(D3D11_TEX2DMS_ARRAY_SRV.sizeof == 8);
static assert(D3D11_SHADER_RESOURCE_VIEW_DESC.sizeof == 24);
static assert(D3D11_BUFFER_RTV.sizeof == 8);
static assert(D3D11_TEX1D_RTV.sizeof == 4);
static assert(D3D11_TEX1D_ARRAY_RTV.sizeof == 12);
static assert(D3D11_TEX2D_RTV.sizeof == 4);
static assert(D3D11_TEX2DMS_RTV.sizeof == 4);
static assert(D3D11_TEX2D_ARRAY_RTV.sizeof == 12);
static assert(D3D11_TEX2DMS_ARRAY_RTV.sizeof == 8);
static assert(D3D11_TEX3D_RTV.sizeof == 12);
static assert(D3D11_RENDER_TARGET_VIEW_DESC.sizeof == 20);
static assert(D3D11_TEX1D_DSV.sizeof == 4);
static assert(D3D11_TEX1D_ARRAY_DSV.sizeof == 12);
static assert(D3D11_TEX2D_DSV.sizeof == 4);
static assert(D3D11_TEX2D_ARRAY_DSV.sizeof == 12);
static assert(D3D11_TEX2DMS_DSV.sizeof == 4);
static assert(D3D11_TEX2DMS_ARRAY_DSV.sizeof == 8);
static assert(D3D11_DEPTH_STENCIL_VIEW_DESC.sizeof == 24);
static assert(D3D11_BUFFER_UAV.sizeof == 12);
static assert(D3D11_TEX1D_UAV.sizeof == 4);
static assert(D3D11_TEX1D_ARRAY_UAV.sizeof == 12);
static assert(D3D11_TEX2D_UAV.sizeof == 4);
static assert(D3D11_TEX2D_ARRAY_UAV.sizeof == 12);
static assert(D3D11_TEX3D_UAV.sizeof == 12);
static assert(D3D11_UNORDERED_ACCESS_VIEW_DESC.sizeof == 20);
static assert(D3D11_SAMPLER_DESC.sizeof == 52);
static assert(D3D11_QUERY_DESC.sizeof == 8);
static assert(D3D11_QUERY_DATA_TIMESTAMP_DISJOINT.sizeof == 16);
static assert(D3D11_QUERY_DATA_PIPELINE_STATISTICS.sizeof == 88);
static assert(D3D11_QUERY_DATA_SO_STATISTICS.sizeof == 16);
static assert(D3D11_COUNTER_DESC.sizeof == 8);
static assert(D3D11_COUNTER_INFO.sizeof == 12);
static assert(D3D11_CLASS_INSTANCE_DESC.sizeof == 32);
static assert(D3D11_FEATURE_DATA_THREADING.sizeof == 8);
static assert(D3D11_FEATURE_DATA_DOUBLES.sizeof == 4);
static assert(D3D11_FEATURE_DATA_FORMAT_SUPPORT.sizeof == 8);
static assert(D3D11_FEATURE_DATA_FORMAT_SUPPORT2.sizeof == 8);
static assert(D3D11_FEATURE_DATA_D3D10_X_HARDWARE_OPTIONS.sizeof == 4);
}


/////////////////////////
// D3D11 Constants


enum D3D11_SDK_LAYERS_VERSION = 1;
enum D3D11_DEBUG_FEATURE_FLUSH_PER_RENDER_OP = 0x1;
enum D3D11_DEBUG_FEATURE_FINISH_PER_RENDER_OP = 0x2;
enum D3D11_DEBUG_FEATURE_PRESENT_PER_RENDER_OP = 0x4;

enum D3D11_RLDO_FLAGS
{
    SUMMARY	= 0x1,
    DETAIL = 0x2,
}
alias D3D11_RLDO_FLAGS D3D11_RLDO;


version(DXSDK_11_0)
{
enum D3D11_SDK_VERSION = 7;   // Based on D3D June 2010 SDK
enum D3D11_MAJOR_VERSION = 11;
enum D3D11_MINOR_VERSION = 0;
enum D3D11_SHADER_MAJOR_VERSION = 5;
enum D3D11_SHADER_MINOR_VERSION = 0;
enum D3D11_SPEC_VERSION = 1.0;
}
version(DXSDK_11_1)
{
enum D3D11_SDK_VERSION = 7;
enum D3D11_MAJOR_VERSION = 11;
enum D3D11_MINOR_VERSION = 0;	// MS didn't rev the minor ver . . .
enum D3D11_SHADER_MAJOR_VERSION = 5;
enum D3D11_SHADER_MINOR_VERSION = 0;
enum D3D11_SPEC_VERSION = 1.07;
}

enum D3D11_16BIT_INDEX_STRIP_CUT_VALUE = 0xffff;
enum D3D11_32BIT_INDEX_STRIP_CUT_VALUE = 0xffffffff;
enum D3D11_8BIT_INDEX_STRIP_CUT_VALUE = 0xff;
enum D3D11_ARRAY_AXIS_ADDRESS_RANGE_BIT_COUNT = 9;
enum D3D11_CLIP_OR_CULL_DISTANCE_COUNT = 8;
enum D3D11_CLIP_OR_CULL_DISTANCE_ELEMENT_COUNT = 2;
enum D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT = 14;
enum D3D11_COMMONSHADER_CONSTANT_BUFFER_COMPONENTS = 4;
enum D3D11_COMMONSHADER_CONSTANT_BUFFER_COMPONENT_BIT_COUNT = 32;
enum D3D11_COMMONSHADER_CONSTANT_BUFFER_HW_SLOT_COUNT = 15;
enum D3D11_COMMONSHADER_CONSTANT_BUFFER_REGISTER_COMPONENTS = 4;
enum D3D11_COMMONSHADER_CONSTANT_BUFFER_REGISTER_COUNT = 15;
enum D3D11_COMMONSHADER_CONSTANT_BUFFER_REGISTER_READS_PER_INST = 1;
enum D3D11_COMMONSHADER_CONSTANT_BUFFER_REGISTER_READ_PORTS = 1;
enum D3D11_COMMONSHADER_FLOWCONTROL_NESTING_LIMIT = 64;
enum D3D11_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_COMPONENTS = 4;
enum D3D11_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_COUNT = 1;
enum D3D11_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_READS_PER_INST = 1;
enum D3D11_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_READ_PORTS = 1;
enum D3D11_COMMONSHADER_IMMEDIATE_VALUE_COMPONENT_BIT_COUNT = 32;
enum D3D11_COMMONSHADER_INPUT_RESOURCE_REGISTER_COMPONENTS = 1;
enum D3D11_COMMONSHADER_INPUT_RESOURCE_REGISTER_COUNT = 128;
enum D3D11_COMMONSHADER_INPUT_RESOURCE_REGISTER_READS_PER_INST = 1;
enum D3D11_COMMONSHADER_INPUT_RESOURCE_REGISTER_READ_PORTS = 1;
enum D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT = 128;
enum D3D11_COMMONSHADER_SAMPLER_REGISTER_COMPONENTS = 1;
enum D3D11_COMMONSHADER_SAMPLER_REGISTER_COUNT = 16;
enum D3D11_COMMONSHADER_SAMPLER_REGISTER_READS_PER_INST = 1;
enum D3D11_COMMONSHADER_SAMPLER_REGISTER_READ_PORTS = 1;
enum D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT = 16;
enum D3D11_COMMONSHADER_SUBROUTINE_NESTING_LIMIT = 32;
enum D3D11_COMMONSHADER_TEMP_REGISTER_COMPONENTS = 4;
enum D3D11_COMMONSHADER_TEMP_REGISTER_COMPONENT_BIT_COUNT = 32;
enum D3D11_COMMONSHADER_TEMP_REGISTER_COUNT = 4096;
enum D3D11_COMMONSHADER_TEMP_REGISTER_READS_PER_INST = 3;
enum D3D11_COMMONSHADER_TEMP_REGISTER_READ_PORTS = 3;
enum D3D11_COMMONSHADER_TEXCOORD_RANGE_REDUCTION_MAX = 10;
enum D3D11_COMMONSHADER_TEXCOORD_RANGE_REDUCTION_MIN = -10;
enum D3D11_COMMONSHADER_TEXEL_OFFSET_MAX_NEGATIVE = -8;
enum D3D11_COMMONSHADER_TEXEL_OFFSET_MAX_POSITIVE = 7;
enum D3D11_CS_4_X_BUCKET00_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 256;
enum D3D11_CS_4_X_BUCKET00_MAX_NUM_THREADS_PER_GROUP = 64;
enum D3D11_CS_4_X_BUCKET01_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 240;
enum D3D11_CS_4_X_BUCKET01_MAX_NUM_THREADS_PER_GROUP = 68;
enum D3D11_CS_4_X_BUCKET02_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 224;
enum D3D11_CS_4_X_BUCKET02_MAX_NUM_THREADS_PER_GROUP = 72;
enum D3D11_CS_4_X_BUCKET03_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 208;
enum D3D11_CS_4_X_BUCKET03_MAX_NUM_THREADS_PER_GROUP = 76;
enum D3D11_CS_4_X_BUCKET04_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 192;
enum D3D11_CS_4_X_BUCKET04_MAX_NUM_THREADS_PER_GROUP = 84;
enum D3D11_CS_4_X_BUCKET05_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 176;
enum D3D11_CS_4_X_BUCKET05_MAX_NUM_THREADS_PER_GROUP = 92;
enum D3D11_CS_4_X_BUCKET06_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 160;
enum D3D11_CS_4_X_BUCKET06_MAX_NUM_THREADS_PER_GROUP = 100;
enum D3D11_CS_4_X_BUCKET07_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 144;
enum D3D11_CS_4_X_BUCKET07_MAX_NUM_THREADS_PER_GROUP = 112;
enum D3D11_CS_4_X_BUCKET08_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 128;
enum D3D11_CS_4_X_BUCKET08_MAX_NUM_THREADS_PER_GROUP = 128;
enum D3D11_CS_4_X_BUCKET09_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 112;
enum D3D11_CS_4_X_BUCKET09_MAX_NUM_THREADS_PER_GROUP = 144;
enum D3D11_CS_4_X_BUCKET10_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 96;
enum D3D11_CS_4_X_BUCKET10_MAX_NUM_THREADS_PER_GROUP = 168;
enum D3D11_CS_4_X_BUCKET11_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 80;
enum D3D11_CS_4_X_BUCKET11_MAX_NUM_THREADS_PER_GROUP = 204;
enum D3D11_CS_4_X_BUCKET12_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 64;
enum D3D11_CS_4_X_BUCKET12_MAX_NUM_THREADS_PER_GROUP = 256;
enum D3D11_CS_4_X_BUCKET13_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 48;
enum D3D11_CS_4_X_BUCKET13_MAX_NUM_THREADS_PER_GROUP = 340;
enum D3D11_CS_4_X_BUCKET14_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 32;
enum D3D11_CS_4_X_BUCKET14_MAX_NUM_THREADS_PER_GROUP = 512;
enum D3D11_CS_4_X_BUCKET15_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 16;
enum D3D11_CS_4_X_BUCKET15_MAX_NUM_THREADS_PER_GROUP = 768;
enum D3D11_CS_4_X_DISPATCH_MAX_THREAD_GROUPS_IN_Z_DIMENSION = 1;
enum D3D11_CS_4_X_RAW_UAV_BYTE_ALIGNMENT = 256;
enum D3D11_CS_4_X_THREAD_GROUP_MAX_THREADS_PER_GROUP = 768;
enum D3D11_CS_4_X_THREAD_GROUP_MAX_X = 768;
enum D3D11_CS_4_X_THREAD_GROUP_MAX_Y = 768;
enum D3D11_CS_4_X_UAV_REGISTER_COUNT = 1;
enum D3D11_CS_DISPATCH_MAX_THREAD_GROUPS_PER_DIMENSION = 65535;
enum D3D11_CS_TGSM_REGISTER_COUNT = 8192;
enum D3D11_CS_TGSM_REGISTER_READS_PER_INST = 1;
enum D3D11_CS_TGSM_RESOURCE_REGISTER_COMPONENTS = 1;
enum D3D11_CS_TGSM_RESOURCE_REGISTER_READ_PORTS = 1;
enum D3D11_CS_THREAD_GROUP_MAX_THREADS_PER_GROUP = 1024;
enum D3D11_CS_THREAD_GROUP_MAX_X = 1024;
enum D3D11_CS_THREAD_GROUP_MAX_Y = 1024;
enum D3D11_CS_THREAD_GROUP_MAX_Z = 64;
enum D3D11_CS_THREAD_GROUP_MIN_X = 1;
enum D3D11_CS_THREAD_GROUP_MIN_Y = 1;
enum D3D11_CS_THREAD_GROUP_MIN_Z = 1;
enum D3D11_CS_THREAD_LOCAL_TEMP_REGISTER_POOL = 16384;
enum D3D11_DEFAULT_BLEND_FACTOR_ALPHA = 1.0f;
enum D3D11_DEFAULT_BLEND_FACTOR_BLUE = 1.0f;
enum D3D11_DEFAULT_BLEND_FACTOR_GREEN = 1.0f;
enum D3D11_DEFAULT_BLEND_FACTOR_RED = 1.0f;
enum D3D11_DEFAULT_BORDER_COLOR_COMPONENT = 0.0f;
enum D3D11_DEFAULT_DEPTH_BIAS = 0;
enum D3D11_DEFAULT_DEPTH_BIAS_CLAMP = 0.0f;
enum D3D11_DEFAULT_MAX_ANISOTROPY = 16;
enum D3D11_DEFAULT_MIP_LOD_BIAS = 0.0f;
enum D3D11_DEFAULT_RENDER_TARGET_ARRAY_INDEX = 0;
enum D3D11_DEFAULT_SAMPLE_MASK = 0xffffffff;
enum D3D11_DEFAULT_SCISSOR_ENDX = 0;
enum D3D11_DEFAULT_SCISSOR_ENDY = 0;
enum D3D11_DEFAULT_SCISSOR_STARTX = 0;
enum D3D11_DEFAULT_SCISSOR_STARTY = 0;
enum D3D11_DEFAULT_SLOPE_SCALED_DEPTH_BIAS = 0.0f;
enum D3D11_DEFAULT_STENCIL_READ_MASK = 0xff;
enum D3D11_DEFAULT_STENCIL_REFERENCE = 0;
enum D3D11_DEFAULT_STENCIL_WRITE_MASK = 0xff;
enum D3D11_DEFAULT_VIEWPORT_AND_SCISSORRECT_INDEX = 0;
enum D3D11_DEFAULT_VIEWPORT_HEIGHT = 0;
enum D3D11_DEFAULT_VIEWPORT_MAX_DEPTH = 0.0f;
enum D3D11_DEFAULT_VIEWPORT_MIN_DEPTH = 0.0f;
enum D3D11_DEFAULT_VIEWPORT_TOPLEFTX = 0;
enum D3D11_DEFAULT_VIEWPORT_TOPLEFTY = 0;
enum D3D11_DEFAULT_VIEWPORT_WIDTH = 0;
enum D3D11_DS_INPUT_CONTROL_POINTS_MAX_TOTAL_SCALARS = 3968;
enum D3D11_DS_INPUT_CONTROL_POINT_REGISTER_COMPONENTS = 4;
enum D3D11_DS_INPUT_CONTROL_POINT_REGISTER_COMPONENT_BIT_COUNT = 32;
enum D3D11_DS_INPUT_CONTROL_POINT_REGISTER_COUNT = 32;
enum D3D11_DS_INPUT_CONTROL_POINT_REGISTER_READS_PER_INST = 2;
enum D3D11_DS_INPUT_CONTROL_POINT_REGISTER_READ_PORTS = 1;
enum D3D11_DS_INPUT_DOMAIN_POINT_REGISTER_COMPONENTS = 3;
enum D3D11_DS_INPUT_DOMAIN_POINT_REGISTER_COMPONENT_BIT_COUNT = 32;
enum D3D11_DS_INPUT_DOMAIN_POINT_REGISTER_COUNT = 1;
enum D3D11_DS_INPUT_DOMAIN_POINT_REGISTER_READS_PER_INST = 2;
enum D3D11_DS_INPUT_DOMAIN_POINT_REGISTER_READ_PORTS = 1;
enum D3D11_DS_INPUT_PATCH_CONSTANT_REGISTER_COMPONENTS = 4;
enum D3D11_DS_INPUT_PATCH_CONSTANT_REGISTER_COMPONENT_BIT_COUNT = 32;
enum D3D11_DS_INPUT_PATCH_CONSTANT_REGISTER_COUNT = 32;
enum D3D11_DS_INPUT_PATCH_CONSTANT_REGISTER_READS_PER_INST = 2;
enum D3D11_DS_INPUT_PATCH_CONSTANT_REGISTER_READ_PORTS = 1;
enum D3D11_DS_OUTPUT_REGISTER_COMPONENTS = 4;
enum D3D11_DS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT = 32;
enum D3D11_DS_OUTPUT_REGISTER_COUNT = 32;
enum D3D11_FLOAT16_FUSED_TOLERANCE_IN_ULP = 0.6f;
enum D3D11_FLOAT32_MAX = 3.402823466e+38f;
enum D3D11_FLOAT32_TO_INTEGER_TOLERANCE_IN_ULP = 0.6f;
enum D3D11_FLOAT_TO_SRGB_EXPONENT_DENOMINATOR = 2.4f;
enum D3D11_FLOAT_TO_SRGB_EXPONENT_NUMERATOR = 1.0f;
enum D3D11_FLOAT_TO_SRGB_OFFSET = 0.055f;
enum D3D11_FLOAT_TO_SRGB_SCALE_1 = 12.92f;
enum D3D11_FLOAT_TO_SRGB_SCALE_2 = 1.055f;
enum D3D11_FLOAT_TO_SRGB_THRESHOLD = 0.0031308f;
enum D3D11_FTOI_INSTRUCTION_MAX_INPUT = 2147483647.999f;
enum D3D11_FTOI_INSTRUCTION_MIN_INPUT = -2147483648.999f;
enum D3D11_FTOU_INSTRUCTION_MAX_INPUT = 4294967295.999f;
enum D3D11_FTOU_INSTRUCTION_MIN_INPUT = 0.0f;
enum D3D11_GS_INPUT_INSTANCE_ID_READS_PER_INST = 2;
enum D3D11_GS_INPUT_INSTANCE_ID_READ_PORTS = 1;
enum D3D11_GS_INPUT_INSTANCE_ID_REGISTER_COMPONENTS = 1;
enum D3D11_GS_INPUT_INSTANCE_ID_REGISTER_COMPONENT_BIT_COUNT = 32;
enum D3D11_GS_INPUT_INSTANCE_ID_REGISTER_COUNT = 1;
enum D3D11_GS_INPUT_PRIM_CONST_REGISTER_COMPONENTS = 1;
enum D3D11_GS_INPUT_PRIM_CONST_REGISTER_COMPONENT_BIT_COUNT = 32;
enum D3D11_GS_INPUT_PRIM_CONST_REGISTER_COUNT = 1;
enum D3D11_GS_INPUT_PRIM_CONST_REGISTER_READS_PER_INST = 2;
enum D3D11_GS_INPUT_PRIM_CONST_REGISTER_READ_PORTS = 1;
enum D3D11_GS_INPUT_REGISTER_COMPONENTS = 4;
enum D3D11_GS_INPUT_REGISTER_COMPONENT_BIT_COUNT = 32;
enum D3D11_GS_INPUT_REGISTER_COUNT = 32;
enum D3D11_GS_INPUT_REGISTER_READS_PER_INST = 2;
enum D3D11_GS_INPUT_REGISTER_READ_PORTS = 1;
enum D3D11_GS_INPUT_REGISTER_VERTICES = 32;
enum D3D11_GS_MAX_INSTANCE_COUNT = 32;
enum D3D11_GS_MAX_OUTPUT_VERTEX_COUNT_ACROSS_INSTANCES = 1024;
enum D3D11_GS_OUTPUT_ELEMENTS = 32;
enum D3D11_GS_OUTPUT_REGISTER_COMPONENTS = 4;
enum D3D11_GS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT = 32;
enum D3D11_GS_OUTPUT_REGISTER_COUNT = 32;
enum D3D11_HS_CONTROL_POINT_PHASE_INPUT_REGISTER_COUNT = 32;
enum D3D11_HS_CONTROL_POINT_PHASE_OUTPUT_REGISTER_COUNT = 32;
enum D3D11_HS_CONTROL_POINT_REGISTER_COMPONENTS = 4;
enum D3D11_HS_CONTROL_POINT_REGISTER_COMPONENT_BIT_COUNT = 32;
enum D3D11_HS_CONTROL_POINT_REGISTER_READS_PER_INST = 2;
enum D3D11_HS_CONTROL_POINT_REGISTER_READ_PORTS = 1;
enum D3D11_HS_FORK_PHASE_INSTANCE_COUNT_UPPER_BOUND = 0xffffffff;
enum D3D11_HS_INPUT_FORK_INSTANCE_ID_REGISTER_COMPONENTS = 1;
enum D3D11_HS_INPUT_FORK_INSTANCE_ID_REGISTER_COMPONENT_BIT_COUNT = 32;
enum D3D11_HS_INPUT_FORK_INSTANCE_ID_REGISTER_COUNT = 1;
enum D3D11_HS_INPUT_FORK_INSTANCE_ID_REGISTER_READS_PER_INST = 2;
enum D3D11_HS_INPUT_FORK_INSTANCE_ID_REGISTER_READ_PORTS = 1;
enum D3D11_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_COMPONENTS = 1;
enum D3D11_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_COMPONENT_BIT_COUNT = 32;
enum D3D11_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_COUNT = 1;
enum D3D11_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_READS_PER_INST = 2;
enum D3D11_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_READ_PORTS = 1;
enum D3D11_HS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENTS = 1;
enum D3D11_HS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENT_BIT_COUNT = 32;
enum D3D11_HS_INPUT_PRIMITIVE_ID_REGISTER_COUNT = 1;
enum D3D11_HS_INPUT_PRIMITIVE_ID_REGISTER_READS_PER_INST = 2;
enum D3D11_HS_INPUT_PRIMITIVE_ID_REGISTER_READ_PORTS = 1;
enum D3D11_HS_JOIN_PHASE_INSTANCE_COUNT_UPPER_BOUND = 0xffffffff;
enum D3D11_HS_MAXTESSFACTOR_LOWER_BOUND = 1.0f;
enum D3D11_HS_MAXTESSFACTOR_UPPER_BOUND = 64.0f;
enum D3D11_HS_OUTPUT_CONTROL_POINTS_MAX_TOTAL_SCALARS = 3968;
enum D3D11_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_COMPONENTS = 1;
enum D3D11_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_COMPONENT_BIT_COUNT = 32;
enum D3D11_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_COUNT = 1;
enum D3D11_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_READS_PER_INST = 2;
enum D3D11_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_READ_PORTS = 1;
enum D3D11_HS_OUTPUT_PATCH_CONSTANT_REGISTER_COMPONENTS = 4;
enum D3D11_HS_OUTPUT_PATCH_CONSTANT_REGISTER_COMPONENT_BIT_COUNT = 32;
enum D3D11_HS_OUTPUT_PATCH_CONSTANT_REGISTER_COUNT = 32;
enum D3D11_HS_OUTPUT_PATCH_CONSTANT_REGISTER_READS_PER_INST = 2;
enum D3D11_HS_OUTPUT_PATCH_CONSTANT_REGISTER_READ_PORTS = 1;
enum D3D11_IA_DEFAULT_INDEX_BUFFER_OFFSET_IN_BYTES = 0;
enum D3D11_IA_DEFAULT_PRIMITIVE_TOPOLOGY = 0;
enum D3D11_IA_DEFAULT_VERTEX_BUFFER_OFFSET_IN_BYTES = 0;
enum D3D11_IA_INDEX_INPUT_RESOURCE_SLOT_COUNT = 1;
enum D3D11_IA_INSTANCE_ID_BIT_COUNT = 32;
enum D3D11_IA_INTEGER_ARITHMETIC_BIT_COUNT = 32;
enum D3D11_IA_PATCH_MAX_CONTROL_POINT_COUNT = 32;
enum D3D11_IA_PRIMITIVE_ID_BIT_COUNT = 32;
enum D3D11_IA_VERTEX_ID_BIT_COUNT = 32;
enum D3D11_IA_VERTEX_INPUT_RESOURCE_SLOT_COUNT = 32;
enum D3D11_IA_VERTEX_INPUT_STRUCTURE_ELEMENTS_COMPONENTS = 128;
enum D3D11_IA_VERTEX_INPUT_STRUCTURE_ELEMENT_COUNT = 32;
enum D3D11_INTEGER_DIVIDE_BY_ZERO_QUOTIENT = 0xffffffff;
enum D3D11_INTEGER_DIVIDE_BY_ZERO_REMAINDER = 0xffffffff;
enum D3D11_KEEP_RENDER_TARGETS_AND_DEPTH_STENCIL = 0xffffffff;
enum D3D11_KEEP_UNORDERED_ACCESS_VIEWS = 0xffffffff;
enum D3D11_LINEAR_GAMMA = 1.0f;
enum D3D11_MAX_BORDER_COLOR_COMPONENT = 1.0f;
enum D3D11_MAX_DEPTH = 1.0f;
enum D3D11_MAX_MAXANISOTROPY = 16;
enum D3D11_MAX_MULTISAMPLE_SAMPLE_COUNT = 32;
enum D3D11_MAX_POSITION_VALUE = 3.402823466e+34f;
enum D3D11_MAX_TEXTURE_DIMENSION_2_TO_EXP = 17;
enum D3D11_MIN_BORDER_COLOR_COMPONENT = 0.0f;
enum D3D11_MIN_DEPTH = 0.0f;
enum D3D11_MIN_MAXANISOTROPY = 0;
enum D3D11_MIP_LOD_BIAS_MAX = 15.99f;
enum D3D11_MIP_LOD_BIAS_MIN = -16.0f;
enum D3D11_MIP_LOD_FRACTIONAL_BIT_COUNT = 8;
enum D3D11_MIP_LOD_RANGE_BIT_COUNT = 8;
enum D3D11_MULTISAMPLE_ANTIALIAS_LINE_WIDTH = 1.4f;
enum D3D11_NONSAMPLE_FETCH_OUT_OF_RANGE_ACCESS_RESULT = 0;
enum D3D11_PIXEL_ADDRESS_RANGE_BIT_COUNT = 15;
enum D3D11_PRE_SCISSOR_PIXEL_ADDRESS_RANGE_BIT_COUNT = 16;
enum D3D11_PS_CS_UAV_REGISTER_COMPONENTS = 1;
enum D3D11_PS_CS_UAV_REGISTER_COUNT = 8;
enum D3D11_PS_CS_UAV_REGISTER_READS_PER_INST = 1;
enum D3D11_PS_CS_UAV_REGISTER_READ_PORTS = 1;
enum D3D11_PS_FRONTFACING_DEFAULT_VALUE = 0xffffffff;
enum D3D11_PS_FRONTFACING_FALSE_VALUE = 0;
enum D3D11_PS_FRONTFACING_TRUE_VALUE = 0xffffffff;
enum D3D11_PS_INPUT_REGISTER_COMPONENTS = 4;
enum D3D11_PS_INPUT_REGISTER_COMPONENT_BIT_COUNT = 32;
enum D3D11_PS_INPUT_REGISTER_COUNT = 32;
enum D3D11_PS_INPUT_REGISTER_READS_PER_INST = 2;
enum D3D11_PS_INPUT_REGISTER_READ_PORTS = 1;
enum D3D11_PS_LEGACY_PIXEL_CENTER_FRACTIONAL_COMPONENT = 0.0f;
enum D3D11_PS_OUTPUT_DEPTH_REGISTER_COMPONENTS = 1;
enum D3D11_PS_OUTPUT_DEPTH_REGISTER_COMPONENT_BIT_COUNT = 32;
enum D3D11_PS_OUTPUT_DEPTH_REGISTER_COUNT = 1;
enum D3D11_PS_OUTPUT_MASK_REGISTER_COMPONENTS = 1;
enum D3D11_PS_OUTPUT_MASK_REGISTER_COMPONENT_BIT_COUNT = 32;
enum D3D11_PS_OUTPUT_MASK_REGISTER_COUNT = 1;
enum D3D11_PS_OUTPUT_REGISTER_COMPONENTS = 4;
enum D3D11_PS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT = 32;
enum D3D11_PS_OUTPUT_REGISTER_COUNT = 8;
enum D3D11_PS_PIXEL_CENTER_FRACTIONAL_COMPONENT = 0.5f;
enum D3D11_RAW_UAV_SRV_BYTE_ALIGNMENT = 16;
enum D3D11_REQ_BLEND_OBJECT_COUNT_PER_DEVICE = 4096;
enum D3D11_REQ_BUFFER_RESOURCE_TEXEL_COUNT_2_TO_EXP = 27;
enum D3D11_REQ_CONSTANT_BUFFER_ELEMENT_COUNT = 4096;
enum D3D11_REQ_DEPTH_STENCIL_OBJECT_COUNT_PER_DEVICE = 4096;
enum D3D11_REQ_DRAWINDEXED_INDEX_COUNT_2_TO_EXP = 32;
enum D3D11_REQ_DRAW_VERTEX_COUNT_2_TO_EXP = 32;
enum D3D11_REQ_FILTERING_HW_ADDRESSABLE_RESOURCE_DIMENSION = 16384;
enum D3D11_REQ_GS_INVOCATION_32BIT_OUTPUT_COMPONENT_LIMIT = 1024;
enum D3D11_REQ_IMMEDIATE_CONSTANT_BUFFER_ELEMENT_COUNT = 4096;
enum D3D11_REQ_MAXANISOTROPY = 16;
enum D3D11_REQ_MIP_LEVELS = 15;
enum D3D11_REQ_MULTI_ELEMENT_STRUCTURE_SIZE_IN_BYTES = 2048;
enum D3D11_REQ_RASTERIZER_OBJECT_COUNT_PER_DEVICE = 4096;
enum D3D11_REQ_RENDER_TO_BUFFER_WINDOW_WIDTH = 16384;
enum D3D11_REQ_RESOURCE_SIZE_IN_MEGABYTES_EXPRESSION_A_TERM = 128;
enum D3D11_REQ_RESOURCE_SIZE_IN_MEGABYTES_EXPRESSION_B_TERM = 0.25f;
enum D3D11_REQ_RESOURCE_VIEW_COUNT_PER_DEVICE_2_TO_EXP = 20;
enum D3D11_REQ_SAMPLER_OBJECT_COUNT_PER_DEVICE = 4096;
enum D3D11_REQ_TEXTURE1D_ARRAY_AXIS_DIMENSION = 2048;
enum D3D11_REQ_TEXTURE1D_U_DIMENSION = 16384;
enum D3D11_REQ_TEXTURE2D_ARRAY_AXIS_DIMENSION = 2048;
enum D3D11_REQ_TEXTURE2D_U_OR_V_DIMENSION = 16384;
enum D3D11_REQ_TEXTURE3D_U_V_OR_W_DIMENSION = 2048;
enum D3D11_REQ_TEXTURECUBE_DIMENSION = 16384;
enum D3D11_RESINFO_INSTRUCTION_MISSING_COMPONENT_RETVAL = 0;
enum D3D11_SHADER_MAX_INSTANCES = 65535;
enum D3D11_SHADER_MAX_INTERFACES = 253;
enum D3D11_SHADER_MAX_INTERFACE_CALL_SITES = 4096;
enum D3D11_SHADER_MAX_TYPES = 65535;
enum D3D11_SHIFT_INSTRUCTION_PAD_VALUE = 0;
enum D3D11_SHIFT_INSTRUCTION_SHIFT_VALUE_BIT_COUNT = 5;
enum D3D11_SIMULTANEOUS_RENDER_TARGET_COUNT = 8;
enum D3D11_SO_BUFFER_MAX_STRIDE_IN_BYTES = 2048;
enum D3D11_SO_BUFFER_MAX_WRITE_WINDOW_IN_BYTES = 512;
enum D3D11_SO_BUFFER_SLOT_COUNT = 4;
enum D3D11_SO_DDI_REGISTER_INDEX_DENOTING_GAP = 0xffffffff;
enum D3D11_SO_NO_RASTERIZED_STREAM = 0xffffffff;
enum D3D11_SO_OUTPUT_COMPONENT_COUNT = 128;
enum D3D11_SO_STREAM_COUNT = 4;
enum D3D11_SPEC_DATE_DAY = 04;
enum D3D11_SPEC_DATE_MONTH = 06;
enum D3D11_SPEC_DATE_YEAR = 2009;
enum D3D11_SRGB_GAMMA = 2.2f;
enum D3D11_SRGB_TO_FLOAT_DENOMINATOR_1 = 12.92f;
enum D3D11_SRGB_TO_FLOAT_DENOMINATOR_2 = 1.055f;
enum D3D11_SRGB_TO_FLOAT_EXPONENT = 2.4f;
enum D3D11_SRGB_TO_FLOAT_OFFSET = 0.055f;
enum D3D11_SRGB_TO_FLOAT_THRESHOLD = 0.04045f;
enum D3D11_SRGB_TO_FLOAT_TOLERANCE_IN_ULP = 0.5f;
enum D3D11_STANDARD_COMPONENT_BIT_COUNT = 32;
enum D3D11_STANDARD_COMPONENT_BIT_COUNT_DOUBLED = 64;
enum D3D11_STANDARD_MAXIMUM_ELEMENT_ALIGNMENT_BYTE_MULTIPLE = 4;
enum D3D11_STANDARD_PIXEL_COMPONENT_COUNT = 128;
enum D3D11_STANDARD_PIXEL_ELEMENT_COUNT = 32;
enum D3D11_STANDARD_VECTOR_SIZE = 4;
enum D3D11_STANDARD_VERTEX_ELEMENT_COUNT = 32;
enum D3D11_STANDARD_VERTEX_TOTAL_COMPONENT_COUNT = 64;
enum D3D11_SUBPIXEL_FRACTIONAL_BIT_COUNT = 8;
enum D3D11_SUBTEXEL_FRACTIONAL_BIT_COUNT = 8;
enum D3D11_TESSELLATOR_MAX_EVEN_TESSELLATION_FACTOR = 64;
enum D3D11_TESSELLATOR_MAX_ISOLINE_DENSITY_TESSELLATION_FACTOR = 64;
enum D3D11_TESSELLATOR_MAX_ODD_TESSELLATION_FACTOR = 63;
enum D3D11_TESSELLATOR_MAX_TESSELLATION_FACTOR = 64;
enum D3D11_TESSELLATOR_MIN_EVEN_TESSELLATION_FACTOR = 2;
enum D3D11_TESSELLATOR_MIN_ISOLINE_DENSITY_TESSELLATION_FACTOR = 1;
enum D3D11_TESSELLATOR_MIN_ODD_TESSELLATION_FACTOR = 1;
enum D3D11_TEXEL_ADDRESS_RANGE_BIT_COUNT = 16;
enum D3D11_UNBOUND_MEMORY_ACCESS_RESULT = 0;
enum D3D11_VIEWPORT_AND_SCISSORRECT_MAX_INDEX = 15;
enum D3D11_VIEWPORT_AND_SCISSORRECT_OBJECT_COUNT_PER_PIPELINE = 16;
enum D3D11_VIEWPORT_BOUNDS_MAX = 32767;
enum D3D11_VIEWPORT_BOUNDS_MIN = -32768;
enum D3D11_VS_INPUT_REGISTER_COMPONENTS = 4;
enum D3D11_VS_INPUT_REGISTER_COMPONENT_BIT_COUNT = 32;
enum D3D11_VS_INPUT_REGISTER_COUNT = 32;
enum D3D11_VS_INPUT_REGISTER_READS_PER_INST = 2;
enum D3D11_VS_INPUT_REGISTER_READ_PORTS = 1;
enum D3D11_VS_OUTPUT_REGISTER_COMPONENTS = 4;
enum D3D11_VS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT = 32;
enum D3D11_VS_OUTPUT_REGISTER_COUNT = 32;
enum D3D11_WHQL_CONTEXT_COUNT_FOR_RESOURCE_LIMIT = 10;
enum D3D11_WHQL_DRAWINDEXED_INDEX_COUNT_2_TO_EXP = 25;
enum D3D11_WHQL_DRAW_VERTEX_COUNT_2_TO_EXP = 25;
enum D3D11_APPEND_ALIGNED_ELEMENT = 0xffffffff;


/////////////////////////
// D3D11 Templates


private enum D3D11_MIN_FILTER_SHIFT = 4;
private enum D3D11_MAG_FILTER_SHIFT = 2;
private enum D3D11_MIP_FILTER_SHIFT = 0;
private enum D3D11_COMPARISON_FILTERING_BIT = 0x80;
private enum D3D11_ANISOTROPIC_FILTERING_BIT = 0x40;


template D3D11_ENCODE_BASIC_FILTER( uint min, uint mag, uint mip, BOOL bComparison )
{
    const D3D11_FILTER D3D11_ENCODE_BASIC_FILTER = ( cast( D3D11_FILTER ) (
        ( ( bComparison ) ? D3D11_COMPARISON_FILTERING_BIT : 0 ) |
        ( ( ( min ) & D3D11_FILTER_TYPE.MASK ) << D3D11_MIN_FILTER_SHIFT ) |
        ( ( ( mag ) & D3D11_FILTER_TYPE.MASK ) << D3D11_MAG_FILTER_SHIFT ) |
        ( ( ( mip ) & D3D11_FILTER_TYPE.MASK ) << D3D11_MIP_FILTER_SHIFT ) ) );
}


template D3D11_ENCODE_ANISOTROPIC_FILTER( BOOL bComparison )
{
    const D3D11_FILTER D3D11_ENCODE_ANISOTROPIC_FILTER = (cast(D3D11_FILTER) (
        D3D11_ANISOTROPIC_FILTERING_BIT |
        D3D11_ENCODE_BASIC_FILTER!(D3D11_FILTER_TYPE.LINEAR, D3D11_FILTER_TYPE.LINEAR, D3D11_FILTER_TYPE.LINEAR, bComparison)));
}


template D3D11_DECODE_MIN_FILTER( D3D11_FILTER d3d11Filter )
{
    const D3D11_FILTER_TYPE D3D11_DECODE_MIN_FILTER = (cast(D3D11_FILTER_TYPE)(((d3d11Filter) >> D3D11_MIN_FILTER_SHIFT) & D3D11_FILTER_TYPE.MASK));
}


template D3D11_DECODE_MAG_FILTER( D3D11_FILTER d3d11Filter )
{
    const D3D11_FILTER_TYPE D3D11_DECODE_MAG_FILTER = (cast(D3D11_FILTER_TYPE)(((d3d11Filter) >> D3D11_MAG_FILTER_SHIFT) & D3D11_FILTER_TYPE.MASK));
}


template D3D11_DECODE_MIP_FILTER( D3D11_FILTER d3d11Filter )
{
    const D3D11_FILTER_TYPE D3D11_DECODE_MIP_FILTER = (cast(D3D11_FILTER_TYPE)(((d3d11Filter) >> D3D11_MIP_FILTER_SHIFT) & D3D11_FILTER_TYPE.MASK));
}


template D3D11_DECODE_IS_COMPARISON_FILTER( D3D11_FILTER d3d11Filter )
{
    const BOOL D3D11_DECODE_IS_COMPARISON_FILTER = ((d3d11Filter) & D3D11_COMPARISON_FILTERING_BIT);
}


template D3D11_DECODE_IS_ANISOTROPIC_FILTER( D3D11_FILTER d3d11Filter )
{
    const BOOL D3D11_DECODE_IS_ANISOTROPIC_FILTER = (((d3d11Filter) & D3D11_ANISOTROPIC_FILTERING_BIT) &&
        (D3D11_FILTER_TYPE.LINEAR == D3D11_DECODE_MIN_FILTER!(d3d11Filter)) &&
        (D3D11_FILTER_TYPE.LINEAR == D3D11_DECODE_MAG_FILTER!(d3d11Filter)) &&
        (D3D11_FILTER_TYPE.LINEAR == D3D11_DECODE_MIP_FILTER!(d3d11Filter)));
}
 

/////////////////////////
// D3D11 Enums


enum D3D11_DRIVER_TYPE : uint
{
    UNKNOWN = D3D_DRIVER_TYPE.UNKNOWN,
    HARDWARE = D3D_DRIVER_TYPE.HARDWARE,
    REFERENCE = D3D_DRIVER_TYPE.REFERENCE,
    NULL = D3D_DRIVER_TYPE.NULL,
    SOFTWARE = D3D_DRIVER_TYPE.SOFTWARE,
    WARP = D3D_DRIVER_TYPE.WARP,
}


enum D3D11_FEATURE_LEVEL : uint
{
    _9_1 = D3D_FEATURE_LEVEL._9_1,
    _9_2 = D3D_FEATURE_LEVEL._9_2,
    _9_3 = D3D_FEATURE_LEVEL._9_3,
    _10_0 = D3D_FEATURE_LEVEL._10_0,
    _10_1 = D3D_FEATURE_LEVEL._10_1,
    _11_0 = D3D_FEATURE_LEVEL._11_0,
}


enum D3D11_INPUT_CLASSIFICATION : uint
{
    PER_VERTEX_DATA = 0,
    PER_INSTANCE_DATA = 1,
}


enum D3D11_FILL_MODE : uint
{
    WIREFRAME = 2,
    SOLID = 3,
}


enum D3D11_PRIMITIVE_TOPOLOGY : uint
{
    UNDEFINED = D3D_PRIMITIVE_TOPOLOGY.UNDEFINED,
    POINTLIST = D3D_PRIMITIVE_TOPOLOGY.POINTLIST,
    LINELIST = D3D_PRIMITIVE_TOPOLOGY.LINELIST,
    LINESTRIP = D3D_PRIMITIVE_TOPOLOGY.LINESTRIP,
    TRIANGLELIST = D3D_PRIMITIVE_TOPOLOGY.TRIANGLELIST,
    TRIANGLESTRIP = D3D_PRIMITIVE_TOPOLOGY.TRIANGLESTRIP,
    LINELIST_ADJ = D3D_PRIMITIVE_TOPOLOGY.LINELIST_ADJ,
    LINESTRIP_ADJ = D3D_PRIMITIVE_TOPOLOGY.LINESTRIP_ADJ,
    TRIANGLELIST_ADJ = D3D_PRIMITIVE_TOPOLOGY.TRIANGLELIST_ADJ,
    TRIANGLESTRIP_ADJ = D3D_PRIMITIVE_TOPOLOGY.TRIANGLESTRIP_ADJ,
    _1_CONTROL_POINT_PATCHLIST = D3D_PRIMITIVE_TOPOLOGY._1_CONTROL_POINT_PATCHLIST,
    _2_CONTROL_POINT_PATCHLIST = D3D_PRIMITIVE_TOPOLOGY._2_CONTROL_POINT_PATCHLIST,
    _3_CONTROL_POINT_PATCHLIST = D3D_PRIMITIVE_TOPOLOGY._3_CONTROL_POINT_PATCHLIST,
    _4_CONTROL_POINT_PATCHLIST = D3D_PRIMITIVE_TOPOLOGY._4_CONTROL_POINT_PATCHLIST,
    _5_CONTROL_POINT_PATCHLIST = D3D_PRIMITIVE_TOPOLOGY._5_CONTROL_POINT_PATCHLIST,
    _6_CONTROL_POINT_PATCHLIST = D3D_PRIMITIVE_TOPOLOGY._6_CONTROL_POINT_PATCHLIST,
    _7_CONTROL_POINT_PATCHLIST = D3D_PRIMITIVE_TOPOLOGY._7_CONTROL_POINT_PATCHLIST,
    _8_CONTROL_POINT_PATCHLIST = D3D_PRIMITIVE_TOPOLOGY._8_CONTROL_POINT_PATCHLIST,
    _9_CONTROL_POINT_PATCHLIST = D3D_PRIMITIVE_TOPOLOGY._9_CONTROL_POINT_PATCHLIST,
    _10_CONTROL_POINT_PATCHLIST = D3D_PRIMITIVE_TOPOLOGY._10_CONTROL_POINT_PATCHLIST,
    _11_CONTROL_POINT_PATCHLIST = D3D_PRIMITIVE_TOPOLOGY._11_CONTROL_POINT_PATCHLIST,
    _12_CONTROL_POINT_PATCHLIST = D3D_PRIMITIVE_TOPOLOGY._12_CONTROL_POINT_PATCHLIST,
    _13_CONTROL_POINT_PATCHLIST = D3D_PRIMITIVE_TOPOLOGY._13_CONTROL_POINT_PATCHLIST,
    _14_CONTROL_POINT_PATCHLIST = D3D_PRIMITIVE_TOPOLOGY._14_CONTROL_POINT_PATCHLIST,
    _15_CONTROL_POINT_PATCHLIST = D3D_PRIMITIVE_TOPOLOGY._15_CONTROL_POINT_PATCHLIST,
    _16_CONTROL_POINT_PATCHLIST = D3D_PRIMITIVE_TOPOLOGY._16_CONTROL_POINT_PATCHLIST,
    _17_CONTROL_POINT_PATCHLIST = D3D_PRIMITIVE_TOPOLOGY._17_CONTROL_POINT_PATCHLIST,
    _18_CONTROL_POINT_PATCHLIST = D3D_PRIMITIVE_TOPOLOGY._18_CONTROL_POINT_PATCHLIST,
    _19_CONTROL_POINT_PATCHLIST = D3D_PRIMITIVE_TOPOLOGY._19_CONTROL_POINT_PATCHLIST,
    _20_CONTROL_POINT_PATCHLIST = D3D_PRIMITIVE_TOPOLOGY._20_CONTROL_POINT_PATCHLIST,
    _21_CONTROL_POINT_PATCHLIST = D3D_PRIMITIVE_TOPOLOGY._21_CONTROL_POINT_PATCHLIST,
    _22_CONTROL_POINT_PATCHLIST = D3D_PRIMITIVE_TOPOLOGY._22_CONTROL_POINT_PATCHLIST,
    _23_CONTROL_POINT_PATCHLIST = D3D_PRIMITIVE_TOPOLOGY._23_CONTROL_POINT_PATCHLIST,
    _24_CONTROL_POINT_PATCHLIST = D3D_PRIMITIVE_TOPOLOGY._24_CONTROL_POINT_PATCHLIST,
    _25_CONTROL_POINT_PATCHLIST = D3D_PRIMITIVE_TOPOLOGY._25_CONTROL_POINT_PATCHLIST,
    _26_CONTROL_POINT_PATCHLIST = D3D_PRIMITIVE_TOPOLOGY._26_CONTROL_POINT_PATCHLIST,
    _27_CONTROL_POINT_PATCHLIST = D3D_PRIMITIVE_TOPOLOGY._27_CONTROL_POINT_PATCHLIST,
    _28_CONTROL_POINT_PATCHLIST = D3D_PRIMITIVE_TOPOLOGY._28_CONTROL_POINT_PATCHLIST,
    _29_CONTROL_POINT_PATCHLIST = D3D_PRIMITIVE_TOPOLOGY._29_CONTROL_POINT_PATCHLIST,
    _30_CONTROL_POINT_PATCHLIST = D3D_PRIMITIVE_TOPOLOGY._30_CONTROL_POINT_PATCHLIST,
    _31_CONTROL_POINT_PATCHLIST = D3D_PRIMITIVE_TOPOLOGY._31_CONTROL_POINT_PATCHLIST,
    _32_CONTROL_POINT_PATCHLIST = D3D_PRIMITIVE_TOPOLOGY._32_CONTROL_POINT_PATCHLIST,
}


enum D3D11_PRIMITIVE : uint
{
    UNDEFINED = D3D_PRIMITIVE.UNDEFINED,
    POINT = D3D_PRIMITIVE.POINT,
    LINE = D3D_PRIMITIVE.LINE,
    TRIANGLE = D3D_PRIMITIVE.TRIANGLE,
    LINE_ADJ = D3D_PRIMITIVE.LINE_ADJ,
    TRIANGLE_ADJ = D3D_PRIMITIVE.TRIANGLE_ADJ,
    _1_CONTROL_POINT_PATCH = D3D_PRIMITIVE._1_CONTROL_POINT_PATCH,
    _2_CONTROL_POINT_PATCH = D3D_PRIMITIVE._2_CONTROL_POINT_PATCH,
    _3_CONTROL_POINT_PATCH = D3D_PRIMITIVE._3_CONTROL_POINT_PATCH,
    _4_CONTROL_POINT_PATCH = D3D_PRIMITIVE._4_CONTROL_POINT_PATCH,
    _5_CONTROL_POINT_PATCH = D3D_PRIMITIVE._5_CONTROL_POINT_PATCH,
    _6_CONTROL_POINT_PATCH = D3D_PRIMITIVE._6_CONTROL_POINT_PATCH,
    _7_CONTROL_POINT_PATCH = D3D_PRIMITIVE._7_CONTROL_POINT_PATCH,
    _8_CONTROL_POINT_PATCH = D3D_PRIMITIVE._8_CONTROL_POINT_PATCH,
    _9_CONTROL_POINT_PATCH = D3D_PRIMITIVE._9_CONTROL_POINT_PATCH,
    _10_CONTROL_POINT_PATCH = D3D_PRIMITIVE._10_CONTROL_POINT_PATCH,
    _11_CONTROL_POINT_PATCH = D3D_PRIMITIVE._11_CONTROL_POINT_PATCH,
    _12_CONTROL_POINT_PATCH = D3D_PRIMITIVE._12_CONTROL_POINT_PATCH,
    _13_CONTROL_POINT_PATCH = D3D_PRIMITIVE._13_CONTROL_POINT_PATCH,
    _14_CONTROL_POINT_PATCH = D3D_PRIMITIVE._14_CONTROL_POINT_PATCH,
    _15_CONTROL_POINT_PATCH = D3D_PRIMITIVE._15_CONTROL_POINT_PATCH,
    _16_CONTROL_POINT_PATCH = D3D_PRIMITIVE._16_CONTROL_POINT_PATCH,
    _17_CONTROL_POINT_PATCH = D3D_PRIMITIVE._17_CONTROL_POINT_PATCH,
    _18_CONTROL_POINT_PATCH = D3D_PRIMITIVE._18_CONTROL_POINT_PATCH,
    _19_CONTROL_POINT_PATCH = D3D_PRIMITIVE._19_CONTROL_POINT_PATCH,
    _20_CONTROL_POINT_PATCH = D3D_PRIMITIVE._20_CONTROL_POINT_PATCH,
    _21_CONTROL_POINT_PATCH = D3D_PRIMITIVE._21_CONTROL_POINT_PATCH,
    _22_CONTROL_POINT_PATCH = D3D_PRIMITIVE._22_CONTROL_POINT_PATCH,
    _23_CONTROL_POINT_PATCH = D3D_PRIMITIVE._23_CONTROL_POINT_PATCH,
    _24_CONTROL_POINT_PATCH = D3D_PRIMITIVE._24_CONTROL_POINT_PATCH,
    _25_CONTROL_POINT_PATCH = D3D_PRIMITIVE._25_CONTROL_POINT_PATCH,
    _26_CONTROL_POINT_PATCH = D3D_PRIMITIVE._26_CONTROL_POINT_PATCH,
    _27_CONTROL_POINT_PATCH = D3D_PRIMITIVE._27_CONTROL_POINT_PATCH,
    _28_CONTROL_POINT_PATCH = D3D_PRIMITIVE._28_CONTROL_POINT_PATCH,
    _29_CONTROL_POINT_PATCH = D3D_PRIMITIVE._29_CONTROL_POINT_PATCH,
    _30_CONTROL_POINT_PATCH = D3D_PRIMITIVE._30_CONTROL_POINT_PATCH,
    _31_CONTROL_POINT_PATCH = D3D_PRIMITIVE._31_CONTROL_POINT_PATCH,
    _32_CONTROL_POINT_PATCH = D3D_PRIMITIVE._32_CONTROL_POINT_PATCH,
}


enum D3D11_CULL_MODE : uint
{
    NONE = 1,
    FRONT = 2,
    BACK = 3,
}


enum D3D11_RESOURCE_DIMENSION : uint
{
    UNKNOWN = 0,
    BUFFER = 1,
    TEXTURE1D = 2,
    TEXTURE2D = 3,
    TEXTURE3D = 4,
}


enum D3D11_SRV_DIMENSION : uint
{
    UNKNOWN = D3D_SRV_DIMENSION.UNKNOWN,
    BUFFER = D3D_SRV_DIMENSION.BUFFER,
    TEXTURE1D = D3D_SRV_DIMENSION.TEXTURE1D,
    TEXTURE1DARRAY = D3D_SRV_DIMENSION.TEXTURE1DARRAY,
    TEXTURE2D = D3D_SRV_DIMENSION.TEXTURE2D,
    TEXTURE2DARRAY = D3D_SRV_DIMENSION.TEXTURE2DARRAY,
    TEXTURE2DMS = D3D_SRV_DIMENSION.TEXTURE2DMS,
    TEXTURE2DMSARRAY = D3D_SRV_DIMENSION.TEXTURE2DMSARRAY,
    TEXTURE3D = D3D_SRV_DIMENSION.TEXTURE3D,
    TEXTURECUBE = D3D_SRV_DIMENSION.TEXTURECUBE,
    TEXTURECUBEARRAY = D3D_SRV_DIMENSION.TEXTURECUBEARRAY,
    BUFFEREX = D3D_SRV_DIMENSION.BUFFEREX,
}


enum D3D11_DSV_DIMENSION : uint
{
    UNKNOWN = 0,
    TEXTURE1D = 1,
    TEXTURE1DARRAY = 2,
    TEXTURE2D = 3,
    TEXTURE2DARRAY = 4,
    TEXTURE2DMS = 5,
    TEXTURE2DMSARRAY = 6,
}


enum D3D11_RTV_DIMENSION : uint
{
    UNKNOWN = 0,
    BUFFER = 1,
    TEXTURE1D = 2,
    TEXTURE1DARRAY = 3,
    TEXTURE2D = 4,
    TEXTURE2DARRAY = 5,
    TEXTURE2DMS = 6,
    TEXTURE2DMSARRAY = 7,
    TEXTURE3D = 8
}


enum D3D11_UAV_DIMENSION : uint
{
    UNKNOWN = 0,
    BUFFER = 1,
    TEXTURE1D = 2,
    TEXTURE1DARRAY = 3,
    TEXTURE2D = 4,
    TEXTURE2DARRAY = 5,
    TEXTURE3D = 8,
}


enum D3D11_USAGE : uint
{
    DEFAULT = 0,
    IMMUTABLE = 1,
    DYNAMIC = 2,
    STAGING = 3,
}


enum D3D11_BIND_FLAG : uint
{
    VERTEX_BUFFER = 0x1,
    INDEX_BUFFER = 0x2,
    CONSTANT_BUFFER = 0x4,
    SHADER_RESOURCE = 0x8,
    STREAM_OUTPUT = 0x10,
    RENDER_TARGET = 0x20,
    DEPTH_STENCIL = 0x40,
    UNORDERED_ACCESS = 0x80,
}
alias D3D11_BIND_FLAG D3D11_BIND;


enum D3D11_CPU_ACCESS_FLAG : uint
{
    WRITE = 0x10000,
    READ = 0x20000,
}
alias D3D11_CPU_ACCESS_FLAG D3D11_CPU_ACCESS;


enum D3D11_RESOURCE_MISC_FLAG : uint
{
    GENERATE_MIPS = 0x1,
    SHARED = 0x2,
    TEXTURECUBE = 0x4,
    DRAWINDIRECT_ARGS = 0x10,
    BUFFER_ALLOW_RAW_VIEWS = 0x20,
    BUFFER_STRUCTURED = 0x40,
    RESOURCE_CLAMP = 0x80,
    SHARED_KEYEDMUTEX = 0x100,
    GDI_COMPATIBLE = 0x200,
}
alias D3D11_RESOURCE_MISC_FLAG D3D11_RESOURCE_MISC;


enum D3D11_MAP : uint
{
    READ = 1,
    WRITE = 2,
    READ_WRITE = 3,
    WRITE_DISCARD = 4,
    WRITE_NO_OVERWRITE = 5,
}


enum D3D11_MAP_FLAG : uint
{
    DO_NOT_WAIT = 0x100000,
}


enum D3D11_RAISE_FLAG : uint
{
    DRIVER_INTERNAL_ERROR = 0x1,
}


enum D3D11_CLEAR_FLAG : uint
{
    DEPTH = 0x1,
    STENCIL = 0x2,
}
alias D3D11_CLEAR_FLAG D3D11_CLEAR;


enum D3D11_COMPARISON_FUNC : uint
{
    NEVER = 1,
    LESS = 2,
    EQUAL = 3,
    LESS_EQUAL = 4,
    GREATER = 5,
    NOT_EQUAL = 6,
    GREATER_EQUAL = 7,
    ALWAYS = 8,
}


enum D3D11_DEPTH_WRITE_MASK : uint
{
    ZERO = 0,
    ALL = 1,
}


enum D3D11_STENCIL_OP : uint
{
    KEEP = 1,
    ZERO = 2,
    REPLACE = 3,
    INCR_SAT = 4,
    DECR_SAT = 5,
    INVERT = 6,
    INCR = 7,
    DECR = 8,
}


enum D3D11_BLEND : uint
{
    ZERO = 1,
    ONE = 2,
    SRC_COLOR = 3,
    INV_SRC_COLOR = 4,
    SRC_ALPHA = 5,
    INV_SRC_ALPHA = 6,
    DEST_ALPHA = 7,
    INV_DEST_ALPHA = 8,
    DEST_COLOR = 9,
    INV_DEST_COLOR = 10,
    SRC_ALPHA_SAT = 11,
    BLEND_FACTOR = 14,
    INV_BLEND_FACTOR = 15,
    SRC1_COLOR = 16,
    INV_SRC1_COLOR = 17,
    SRC1_ALPHA = 18,
    INV_SRC1_ALPHA = 19,
}


enum D3D11_BLEND_OP : uint
{
    ADD = 1,
    SUBTRACT = 2,
    REV_SUBTRACT = 3,
    MIN = 4,
    MAX = 5,
}

enum D3D11_COLOR_WRITE_ENABLE : uint
{
    RED = 1,
    GREEN = 2,
    BLUE = 4,
    ALPHA = 8,
    ALL = RED | GREEN | BLUE | ALPHA,
}


enum D3D11_TEXTURECUBE_FACE : uint
{
    POSITIVE_X = 0,
    NEGATIVE_X = 1,
    POSITIVE_Y = 2,
    NEGATIVE_Y = 3,
    POSITIVE_Z = 4,
    NEGATIVE_Z = 5,
}


enum D3D11_BUFFEREX_SRV_FLAG : uint
{   
    RAW = 0x1,
}


enum D3D11_DSV_FLAG : uint
{
    READ_ONLY_DEPTH = 0x1,
    READ_ONLY_STENCIL = 0x2,
}
alias D3D11_DSV_FLAG D3D11_DSV;


enum D3D11_BUFFER_UAV_FLAG : uint
{
    RAW = 0x1,
    APPEND = 0x2,
    COUNTER = 0x4,
}


enum D3D11_FILTER : uint
{
    MIN_MAG_MIP_POINT = 0,
    MIN_MAG_POINT_MIP_LINEAR = 0x1,
    MIN_POINT_MAG_LINEAR_MIP_POINT = 0x4,
    MIN_POINT_MAG_MIP_LINEAR = 0x5,
    MIN_LINEAR_MAG_MIP_POINT = 0x10,
    MIN_LINEAR_MAG_POINT_MIP_LINEAR = 0x11,
    MIN_MAG_LINEAR_MIP_POINT = 0x14,
    MIN_MAG_MIP_LINEAR = 0x15,
    ANISOTROPIC = 0x55,
    COMPARISON_MIN_MAG_MIP_POINT = 0x80,
    COMPARISON_MIN_MAG_POINT_MIP_LINEAR = 0x81,
    COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT = 0x84,
    COMPARISON_MIN_POINT_MAG_MIP_LINEAR = 0x85,
    COMPARISON_MIN_LINEAR_MAG_MIP_POINT = 0x90,
    COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 0x91,
    COMPARISON_MIN_MAG_LINEAR_MIP_POINT = 0x94,
    COMPARISON_MIN_MAG_MIP_LINEAR = 0x95,
    COMPARISON_ANISOTROPIC = 0xd5,
}


enum D3D11_FILTER_TYPE : uint
{
    POINT = 0x0,
    LINEAR = 0x1,
    MASK = 0x3,
}


enum D3D11_TEXTURE_ADDRESS_MODE : uint
{
    WRAP = 1,
    MIRROR = 2,
    CLAMP = 3,
    BORDER = 4,
    MIRROR_ONCE = 5,
}


enum D3D11_FORMAT_SUPPORT : uint
{
    BUFFER = 0x1,
    IA_VERTEX_BUFFER = 0x2,
    IA_INDEX_BUFFER = 0x4,
    SO_BUFFER = 0x8,
    TEXTURE1D = 0x10,
    TEXTURE2D = 0x20,
    TEXTURE3D = 0x40,
    TEXTURECUBE = 0x80,
    SHADER_LOAD = 0x100,
    SHADER_SAMPLE = 0x200,
    SHADER_SAMPLE_COMPARISON = 0x400,
    SHADER_SAMPLE_MONO_TEXT = 0x800,
    MIP = 0x1000,
    MIP_AUTOGEN = 0x2000,
    RENDER_TARGET = 0x4000,
    BLENDABLE = 0x8000,
    DEPTH_STENCIL = 0x10000,
    CPU_LOCKABLE = 0x20000,
    MULTISAMPLE_RESOLVE = 0x40000,
    DISPLAY = 0x80000,
    CAST_WITHIN_BIT_LAYOUT = 0x100000,
    MULTISAMPLE_RENDERTARGET = 0x200000,
    MULTISAMPLE_LOAD = 0x400000,
    SHADER_GATHER = 0x800000,
    BACK_BUFFER_CAST = 0x1000000,
    TYPED_UNORDERED_ACCESS_VIEW = 0x2000000,
    SHADER_GATHER_COMPARISON = 0x4000000,
}


enum D3D11_FORMAT_SUPPORT2 : uint
{
    UAV_ATOMIC_ADD = 0x1,
    UAV_ATOMIC_BITWISE_OPS = 0x2,
    UAV_ATOMIC_COMPARE_STORE_OR_COMPARE_EXCHANGE = 0x4,
    UAV_ATOMIC_EXCHANGE = 0x8,
    UAV_ATOMIC_SIGNED_MIN_OR_MAX = 0x10,
    UAV_ATOMIC_UNSIGNED_MIN_OR_MAX = 0x20,
    UAV_TYPED_LOAD = 0x40,
    UAV_TYPED_STORE = 0x80,
}


enum D3D11_ASYNC_GETDATA_FLAG : uint
{
    DONOTFLUSH = 0x1,
}
alias D3D11_ASYNC_GETDATA_FLAG D3D11_ASYNC_GETDATA;


enum D3D11_QUERY : uint
{
    EVENT = 0,
    OCCLUSION,
    TIMESTAMP,
    TIMESTAMP_DISJOINT,
    PIPELINE_STATISTICS,
    OCCLUSION_PREDICATE,
    SO_STATISTICS,
    SO_OVERFLOW_PREDICATE,
    SO_STATISTICS_STREAM0,
    SO_OVERFLOW_PREDICATE_STREAM0,
    SO_STATISTICS_STREAM1,
    SO_OVERFLOW_PREDICATE_STREAM1,
    SO_STATISTICS_STREAM2,
    SO_OVERFLOW_PREDICATE_STREAM2,
    SO_STATISTICS_STREAM3,
    SO_OVERFLOW_PREDICATE_STREAM3,
}


enum D3D11_QUERY_MISC_FLAG : uint
{
    PREDICATEHINT = 0x1,
}
alias D3D11_QUERY_MISC_FLAG D3D11_QUERY_MISC;


enum D3D11_COUNTER : uint
{
    DEVICE_DEPENDENT_0 = 0x40000000,
}


enum D3D11_COUNTER_TYPE : uint
{   
    FLOAT32 = 0,
    UINT16,
    UINT32,
    UINT64,
}


// Strange naming conversion to D, prefer doing this:
// D3D11_STANDARD_MULTISAMPLE_PATTERN becomes-> D3D11_MULTISAMPLE.STANDARD_PATTERN
enum D3D11_STANDARD_MULTISAMPLE_QUALITY_LEVELS : uint
{
    D3D11_STANDARD_MULTISAMPLE_PATTERN = 0xffffffff,
    D3D11_CENTER_MULTISAMPLE_PATTERN = 0xffffffff,
    STANDARD_PATTERN = 0xffffffff,
    CENTER_PATTERN = 0xfffffffe,
}
alias D3D11_STANDARD_MULTISAMPLE_QUALITY_LEVELS D3D11_MULTISAMPLE;


enum D3D11_DEVICE_CONTEXT_TYPE : uint
{
    IMMEDIATE = 0,
    DEFERRED,
}


enum D3D11_FEATURE : uint
{   
    THREADING = 0,
    DOUBLES,
    FORMAT_SUPPORT,
    FORMAT_SUPPORT2,
    D3D10_X_HARDWARE_OPTIONS,
}


enum D3D11_CREATE_DEVICE_FLAG : uint
{
    SINGLETHREADED = 0x1,
    DEBUG = 0x2,
    SWITCH_TO_REF = 0x4,
    PREVENT_INTERNAL_THREADING_OPTIMIZATIONS = 0x8,
    BGRA_SUPPORT = 0x20,
}
alias D3D11_CREATE_DEVICE_FLAG D3D11_CREATE_DEVICE;


/////////////////////////
// D3D11 Structs


alias D3DCOLORVALUE D3D11COLORVALUE;


struct D3D11_INPUT_ELEMENT_DESC
{
    char* SemanticName;
    uint SemanticIndex;
    DXGI_FORMAT Format;
    uint InputSlot;
    uint AlignedByteOffset;
    D3D11_INPUT_CLASSIFICATION InputSlotClass;
    uint InstanceDataStepRate;
    
    this(string InSemanticName)
    {
        SemanticName = toUTFz!(char*)(InSemanticName);
    }
}


struct D3D11_SO_DECLARATION_ENTRY
{
    uint Stream;
    char* SemanticName;
    uint SemanticIndex;
    ubyte StartComponent;
    ubyte ComponentCount;
    ubyte OutputSlot;
    
    this (string InSemanticName)
    {
        SemanticName = toUTFz!(char*)(InSemanticName);
    }
}


struct D3D11_VIEWPORT
{
    float TopLeftX;
    float TopLeftY;
    float Width;
    float Height;
    float MinDepth;
    float MaxDepth;
}


alias RECT D3D11_RECT;


struct D3D11_BOX
{
    uint left;
    uint top;
    uint front;
    uint right;
    uint bottom;
    uint back;
}


struct D3D11_DEPTH_STENCILOP_DESC
{
    D3D11_STENCIL_OP StencilFailOp;
    D3D11_STENCIL_OP StencilDepthFailOp;
    D3D11_STENCIL_OP StencilPassOp;
    D3D11_COMPARISON_FUNC StencilFunc;
}


struct D3D11_DEPTH_STENCIL_DESC
{
    BOOL DepthEnable;
    D3D11_DEPTH_WRITE_MASK DepthWriteMask;
    D3D11_COMPARISON_FUNC DepthFunc;
    BOOL StencilEnable;
    ubyte StencilReadMask;
    ubyte StencilWriteMask;
    D3D11_DEPTH_STENCILOP_DESC FrontFace;
    D3D11_DEPTH_STENCILOP_DESC BackFace;
}


struct D3D11_RENDER_TARGET_BLEND_DESC
{
    BOOL BlendEnable;
    D3D11_BLEND SrcBlend;
    D3D11_BLEND DestBlend;
    D3D11_BLEND_OP BlendOp;
    D3D11_BLEND SrcBlendAlpha;
    D3D11_BLEND DestBlendAlpha;
    D3D11_BLEND_OP BlendOpAlpha;
    ubyte RenderTargetWriteMask;
}


struct D3D11_BLEND_DESC
{
    BOOL AlphaToCoverageEnable;
    BOOL IndependentBlendEnable;
    D3D11_RENDER_TARGET_BLEND_DESC[8] RenderTarget;
}


struct D3D11_RASTERIZER_DESC
{
    D3D11_FILL_MODE FillMode;
    D3D11_CULL_MODE CullMode;
    BOOL FrontCounterClockwise;
    int DepthBias;
    float DepthBiasClamp;
    float SlopeScaledDepthBias;
    BOOL DepthClipEnable;
    BOOL ScissorEnable;
    BOOL MultisampleEnable;
    BOOL AntialiasedLineEnable;
}


struct D3D11_SUBRESOURCE_DATA
{
    const void* pSysMem;
    uint SysMemPitch;
    uint SysMemSlicePitch;
}


struct D3D11_MAPPED_SUBRESOURCE
{
    void* pData;
    uint RowPitch;
    uint DepthPitch;
}


struct D3D11_BUFFER_DESC
{
    uint ByteWidth;
    D3D11_USAGE Usage;
    uint BindFlags;
    uint CPUAccessFlags;
    uint MiscFlags;
    uint StructureByteStride;
}


struct D3D11_TEXTURE1D_DESC
{
    uint Width;
    uint MipLevels;
    uint ArraySize;
    DXGI_FORMAT Format;
    D3D11_USAGE Usage;
    uint BindFlags;
    uint CPUAccessFlags;
    uint MiscFlags;
}


struct D3D11_TEXTURE2D_DESC
{
    uint Width;
    uint Height;
    uint MipLevels;
    uint ArraySize;
    DXGI_FORMAT Format;
    DXGI_SAMPLE_DESC SampleDesc;
    D3D11_USAGE Usage;
    uint BindFlags;
    uint CPUAccessFlags;
    uint MiscFlags;
}


struct D3D11_TEXTURE3D_DESC
{
    uint Width;
    uint Height;
    uint Depth;
    uint MipLevels;
    DXGI_FORMAT Format;
    D3D11_USAGE Usage;
    uint BindFlags;
    uint CPUAccessFlags;
    uint MiscFlags;
}


struct D3D11_BUFFER_SRV
{
    union 
    {
        uint FirstElement;
        uint ElementOffset;
    }
    union 
    {
        uint NumElements;
        uint ElementWidth;
    }
}


struct D3D11_BUFFEREX_SRV
{
    uint FirstElement;
    uint NumElements;
    uint Flags;
}


struct D3D11_TEX1D_SRV
{
    uint MostDetailedMip;
    uint MipLevels;
}


struct D3D11_TEX1D_ARRAY_SRV
{
    uint MostDetailedMip;
    uint MipLevels;
    uint FirstArraySlice;
    uint ArraySize;
}


struct D3D11_TEX2D_SRV
{
    uint MostDetailedMip;
    uint MipLevels;
}


struct D3D11_TEX2D_ARRAY_SRV
{
    uint MostDetailedMip;
    uint MipLevels;
    uint FirstArraySlice;
    uint ArraySize;
}


struct D3D11_TEX3D_SRV
{
    uint MostDetailedMip;
    uint MipLevels;
}


struct D3D11_TEXCUBE_SRV
{
    uint MostDetailedMip;
    uint MipLevels;
}


struct D3D11_TEXCUBE_ARRAY_SRV
{
    uint MostDetailedMip;
    uint MipLevels;
    uint First2DArrayFace;
    uint NumCubes;
}


struct D3D11_TEX2DMS_SRV
{
    uint UnusedField_NothingToDefine;
}


struct D3D11_TEX2DMS_ARRAY_SRV
{
    uint FirstArraySlice;
    uint ArraySize;
}


struct D3D11_SHADER_RESOURCE_VIEW_DESC
{
    DXGI_FORMAT Format;
    D3D11_SRV_DIMENSION ViewDimension;
    union 
    {
        D3D11_BUFFER_SRV Buffer;
        D3D11_TEX1D_SRV Texture1D;
        D3D11_TEX1D_ARRAY_SRV Texture1DArray;
        D3D11_TEX2D_SRV Texture2D;
        D3D11_TEX2D_ARRAY_SRV Texture2DArray;
        D3D11_TEX2DMS_SRV Texture2DMS;
        D3D11_TEX2DMS_ARRAY_SRV Texture2DMSArray;
        D3D11_TEX3D_SRV Texture3D;
        D3D11_TEXCUBE_SRV TextureCube;
        D3D11_TEXCUBE_ARRAY_SRV TextureCubeArray;
        D3D11_BUFFEREX_SRV BufferEx;
    }
}


struct D3D11_BUFFER_RTV
{
    union 
    {
        uint FirstElement;
        uint ElementOffset;
    }
    union 
    {
        uint NumElements;
        uint ElementWidth;
    }
}


struct D3D11_TEX1D_RTV
{
    uint MipSlice;
}


struct D3D11_TEX1D_ARRAY_RTV
{
    uint MipSlice;
    uint FirstArraySlice;
    uint ArraySize;
}


struct D3D11_TEX2D_RTV
{
    uint MipSlice;
}


struct D3D11_TEX2DMS_RTV
{
    uint UnusedField_NothingToDefine;
}


struct D3D11_TEX2D_ARRAY_RTV
{
    uint MipSlice;
    uint FirstArraySlice;
    uint ArraySize;
}


struct D3D11_TEX2DMS_ARRAY_RTV
{
    uint FirstArraySlice;
    uint ArraySize;
}


struct D3D11_TEX3D_RTV
{
    uint MipSlice;
    uint FirstWSlice;
    uint WSize;
}


struct D3D11_RENDER_TARGET_VIEW_DESC
{
    DXGI_FORMAT Format;
    D3D11_RTV_DIMENSION ViewDimension;
    union 
    {
        D3D11_BUFFER_RTV Buffer;
        D3D11_TEX1D_RTV Texture1D;
        D3D11_TEX1D_ARRAY_RTV Texture1DArray;
        D3D11_TEX2D_RTV Texture2D;
        D3D11_TEX2D_ARRAY_RTV Texture2DArray;
        D3D11_TEX2DMS_RTV Texture2DMS;
        D3D11_TEX2DMS_ARRAY_RTV Texture2DMSArray;
        D3D11_TEX3D_RTV Texture3D;
    }
}


struct D3D11_TEX1D_DSV
{
    uint MipSlice;
}


struct D3D11_TEX1D_ARRAY_DSV
{
    uint MipSlice;
    uint FirstArraySlice;
    uint ArraySize;
}


struct D3D11_TEX2D_DSV
{
    uint MipSlice;
}


struct D3D11_TEX2D_ARRAY_DSV
{
    uint MipSlice;
    uint FirstArraySlice;
    uint ArraySize;
}


struct D3D11_TEX2DMS_DSV
{
    uint UnusedField_NothingToDefine;
}


struct D3D11_TEX2DMS_ARRAY_DSV
{
    uint FirstArraySlice;
    uint ArraySize;
}


struct D3D11_DEPTH_STENCIL_VIEW_DESC
{
    DXGI_FORMAT Format;
    D3D11_DSV_DIMENSION ViewDimension;
    uint Flags;
    union 
    {
        D3D11_TEX1D_DSV Texture1D;
        D3D11_TEX1D_ARRAY_DSV Texture1DArray;
        D3D11_TEX2D_DSV Texture2D;
        D3D11_TEX2D_ARRAY_DSV Texture2DArray;
        D3D11_TEX2DMS_DSV Texture2DMS;
        D3D11_TEX2DMS_ARRAY_DSV Texture2DMSArray;
    }
}


struct D3D11_BUFFER_UAV
{
    uint FirstElement;
    uint NumElements;
    uint Flags;
}


struct D3D11_TEX1D_UAV
{
    uint MipSlice;
}


struct D3D11_TEX1D_ARRAY_UAV
{
    uint MipSlice;
    uint FirstArraySlice;
    uint ArraySize;
}


struct D3D11_TEX2D_UAV
{
    uint MipSlice;
}


struct D3D11_TEX2D_ARRAY_UAV
{
    uint MipSlice;
    uint FirstArraySlice;
    uint ArraySize;
}


struct D3D11_TEX3D_UAV
{
    uint MipSlice;
    uint FirstWSlice;
    uint WSize;
}


struct D3D11_UNORDERED_ACCESS_VIEW_DESC
{
    DXGI_FORMAT Format;
    D3D11_UAV_DIMENSION ViewDimension;
    union 
    {
        D3D11_BUFFER_UAV Buffer;
        D3D11_TEX1D_UAV Texture1D;
        D3D11_TEX1D_ARRAY_UAV Texture1DArray;
        D3D11_TEX2D_UAV Texture2D;
        D3D11_TEX2D_ARRAY_UAV Texture2DArray;
        D3D11_TEX3D_UAV Texture3D;
    }
}


struct D3D11_SAMPLER_DESC
{
    D3D11_FILTER Filter;
    D3D11_TEXTURE_ADDRESS_MODE AddressU;
    D3D11_TEXTURE_ADDRESS_MODE AddressV;
    D3D11_TEXTURE_ADDRESS_MODE AddressW;
    float MipLODBias;
    uint MaxAnisotropy;
    D3D11_COMPARISON_FUNC ComparisonFunc;
    float[4] BorderColor;
    float MinLOD;
    float MaxLOD;
}


struct D3D11_QUERY_DESC
{
    D3D11_QUERY Query;
    uint MiscFlags;
}


struct D3D11_QUERY_DATA_TIMESTAMP_DISJOINT
{
    ulong Frequency;
    BOOL Disjoint;
}


struct D3D11_QUERY_DATA_PIPELINE_STATISTICS
{
    ulong IAVertices;
    ulong IAPrimitives;
    ulong VSInvocations;
    ulong GSInvocations;
    ulong GSPrimitives;
    ulong CInvocations;
    ulong CPrimitives;
    ulong PSInvocations;
    ulong HSInvocations;
    ulong DSInvocations;
    ulong CSInvocations;
}


struct D3D11_QUERY_DATA_SO_STATISTICS
{
    ulong NumPrimitivesWritten;
    ulong PrimitivesStorageNeeded;
}


struct D3D11_COUNTER_DESC
{
    D3D11_COUNTER Counter;
    uint MiscFlags;
}


struct D3D11_COUNTER_INFO
{
    D3D11_COUNTER LastDeviceDependentCounter;
    uint NumSimultaneousCounters;
    ubyte NumDetectableParallelUnits;
}


struct D3D11_CLASS_INSTANCE_DESC
{
    uint InstanceId;
    uint InstanceIndex;
    uint TypeId;
    uint ConstantBuffer;
    uint BaseConstantBufferOffset;
    uint BaseTexture;
    uint BaseSampler;
    BOOL Created;
}


struct D3D11_FEATURE_DATA_THREADING
{
    BOOL DriverConcurrentCreates;
    BOOL DriverCommandLists;
}


struct D3D11_FEATURE_DATA_DOUBLES
{
    BOOL DoublePrecisionFloatShaderOps;
}


struct D3D11_FEATURE_DATA_FORMAT_SUPPORT
{
    DXGI_FORMAT InFormat;
    uint OutFormatSupport;
}


struct D3D11_FEATURE_DATA_FORMAT_SUPPORT2
{
    DXGI_FORMAT InFormat;
    uint OutFormatSupport2;
}


struct D3D11_FEATURE_DATA_D3D10_X_HARDWARE_OPTIONS
{
    BOOL ComputeShaders_Plus_RawAndStructuredBuffers_Via_Shader_4_x;
}


uint D3D11CalcSubresource( uint MipSlice, uint ArraySlice, uint MipLevels )
{
    return MipSlice + ArraySlice * MipLevels;
}


/////////////////////////
// D3D11 Interfaces


mixin(DX_DECLARE_IID("ID3D11DeviceChild", "1841E5C8-16B0-489B-BCC8-44CFB0D5DEAE"));
interface ID3D11DeviceChild : IUnknown
{
extern(Windows):
    void GetDevice(
        out ID3D11Device ppDevice
        );
    HRESULT GetPrivateData(
        GUID* guid,
        ref uint pDataSize,
        void* pData
        );
    HRESULT SetPrivateData(
        GUID* guid,
        uint DataSize,
        in void* pData
        );
    HRESULT SetPrivateDataInterface(
        GUID* guid,
        IUnknown pData
        );
}


mixin(DX_DECLARE_IID("ID3D11DepthStencilState", "03823EFB-8D8F-4E1C-9AA2-F64BB2CBFDF1"));
interface ID3D11DepthStencilState : ID3D11DeviceChild
{
extern(Windows):
    void GetDesc(
        out D3D11_DEPTH_STENCIL_DESC pDesc
        );
}


mixin(DX_DECLARE_IID("ID3D11BlendState", "75B68FAA-347D-4159-8F45-A0640F01CD9A"));
interface ID3D11BlendState : ID3D11DeviceChild
{
extern(Windows):
    void GetDesc(
        out D3D11_BLEND_DESC pDesc
        );
}


mixin(DX_DECLARE_IID("ID3D11RasterizerState", "9BB4AB81-AB1A-4D8F-B506-FC04200B6EE7"));
interface ID3D11RasterizerState : ID3D11DeviceChild
{
extern(Windows):
    void GetDesc(
        out D3D11_RASTERIZER_DESC pDesc
        );
}


mixin(DX_DECLARE_IID("ID3D11Resource", "DC8E63F3-D12B-4952-B47B-5E45026A862D"));
interface ID3D11Resource : ID3D11DeviceChild
{
extern(Windows):
    void GetType(
        out D3D11_RESOURCE_DIMENSION pResourceDimension
        );
    void SetEvictionPriority(
        uint EvictionPriority
        );
    uint GetEvictionPriority(
        );
}


mixin(DX_DECLARE_IID("ID3D11Buffer", "48570B85-D1EE-4FCD-A250-EB350722B037"));
interface ID3D11Buffer : ID3D11Resource
{
extern(Windows):
    void GetDesc(
        out D3D11_BUFFER_DESC pDesc
        );
}


mixin(DX_DECLARE_IID("ID3D11Texture1D", "F8FB5C27-C6B3-4F75-A4C8-439AF2EF564C"));
interface ID3D11Texture1D : ID3D11Resource
{
extern(Windows):
    void GetDesc(
        out D3D11_TEXTURE1D_DESC pDesc
        );
}


mixin(DX_DECLARE_IID("ID3D11Texture2D", "6F15AAF2-D208-4E89-9AB4-489535D34F9C"));
interface ID3D11Texture2D : ID3D11Resource
{
extern(Windows):
    void GetDesc(
        out D3D11_TEXTURE2D_DESC pDesc
        );
}


mixin(DX_DECLARE_IID("ID3D11Texture3D", "037E866E-F56D-4357-A8AF-9DABBE6E250E"));
interface ID3D11Texture3D : ID3D11Resource
{
extern(Windows):
    void GetDesc(
        out D3D11_TEXTURE3D_DESC pDesc
        );
}


mixin(DX_DECLARE_IID("ID3D11View", "839D1216-BB2E-412B-B7F4-A9DBEBE08ED1"));
interface ID3D11View : ID3D11DeviceChild
{
extern(Windows):
    void GetResource(
        out ID3D11Resource ppResource
        );
}


mixin(DX_DECLARE_IID("ID3D11ShaderResourceView", "B0E06FE0-8192-4E1A-B1CA-36D7414710B2"));
interface ID3D11ShaderResourceView : ID3D11View
{
extern(Windows):
    void GetDesc(
        out D3D11_SHADER_RESOURCE_VIEW_DESC pDesc
        );
}


mixin(DX_DECLARE_IID("ID3D11RenderTargetView", "DFDBA067-0B8D-4865-875B-D7B4516CC164"));
interface ID3D11RenderTargetView : ID3D11View
{
extern(Windows):
    void GetDesc(
        out D3D11_RENDER_TARGET_VIEW_DESC pDesc
        );
}


mixin(DX_DECLARE_IID("ID3D11DepthStencilView", "9FDAC92A-1876-48C3-AFAD-25B94F84A9B6"));
interface ID3D11DepthStencilView : ID3D11View
{
extern(Windows):
    void GetDesc(
        out D3D11_DEPTH_STENCIL_VIEW_DESC pDesc
        );
}


mixin(DX_DECLARE_IID("ID3D11UnorderedAccessView", "28ACF509-7F5C-48F6-8611-F316010A6380"));
interface ID3D11UnorderedAccessView : ID3D11View
{
extern(Windows):
    void GetDesc(
        out D3D11_UNORDERED_ACCESS_VIEW_DESC pDesc
        );
}


mixin(DX_DECLARE_IID("ID3D11VertexShader", "3B301D64-D678-4289-8897-22F8928B72F3"));
interface ID3D11VertexShader : ID3D11DeviceChild
{
extern(Windows):
}


mixin(DX_DECLARE_IID("ID3D11HullShader", "8E5C6061-628A-4C8E-8264-BBE45CB3D5DD"));
interface ID3D11HullShader : ID3D11DeviceChild
{
extern(Windows):
}


mixin(DX_DECLARE_IID("ID3D11DomainShader", "F582C508-0F36-490C-9977-31EECE268CFA"));
interface ID3D11DomainShader : ID3D11DeviceChild
{
extern(Windows):
}


mixin(DX_DECLARE_IID("ID3D11GeometryShader", "38325B96-EFFB-4022-BA02-2E795B70275C"));
interface ID3D11GeometryShader : ID3D11DeviceChild
{
extern(Windows):
}


mixin(DX_DECLARE_IID("ID3D11PixelShader", "EA82E40D-51DC-4F33-93D4-DB7C9125AE8C"));
interface ID3D11PixelShader : ID3D11DeviceChild
{
extern(Windows):
}


mixin(DX_DECLARE_IID("ID3D11ComputeShader", "4F5B196E-C2BD-495E-BD01-1FDED38E4969"));
interface ID3D11ComputeShader : ID3D11DeviceChild
{
extern(Windows):
}


mixin(DX_DECLARE_IID("ID3D11InputLayout", "E4819DDC-4CF0-4025-BD26-5DE82A3E07B7"));
interface ID3D11InputLayout : ID3D11DeviceChild
{
extern(Windows):
}


mixin(DX_DECLARE_IID("ID3D11SamplerState", "DA6FEA51-564C-4487-9810-F0D0F9B4E3A5"));
interface ID3D11SamplerState : ID3D11DeviceChild
{
extern(Windows):
    void GetDesc( D3D11_SAMPLER_DESC* pDesc );
}


mixin(DX_DECLARE_IID("ID3D11Asynchronous", "4B35D0CD-1E15-4258-9C98-1B1333F6DD3B"));
interface ID3D11Asynchronous : ID3D11DeviceChild
{
extern(Windows):
    uint GetDataSize();
}


mixin(DX_DECLARE_IID("ID3D11Query", "D6C00747-87B7-425E-B84D-44D108560AFD"));
interface ID3D11Query : ID3D11Asynchronous
{
extern(Windows):
    void GetDesc( D3D11_QUERY_DESC* pDesc );
}


mixin(DX_DECLARE_IID("ID3D11Predicate", "9EB576DD-9F77-4D86-81AA-8BAB5FE490E2"));
interface ID3D11Predicate : ID3D11Query
{
extern(Windows):
}


mixin(DX_DECLARE_IID("ID3D11Counter", "6E8C49FB-A371-4770-B440-29086022B741"));
interface ID3D11Counter : ID3D11Asynchronous
{
extern(Windows):
    void GetDesc(
        out D3D11_COUNTER_DESC pDesc
        );
}


mixin(DX_DECLARE_IID("ID3D11ClassInstance", "A6CD7FAA-B0B7-4A2F-9436-8662A65797CB"));
interface ID3D11ClassInstance : ID3D11DeviceChild
{
extern(Windows):
    void GetClassLinkage(
        out ID3D11ClassLinkage ppLinkage
        );
    void GetDesc(
        out D3D11_CLASS_INSTANCE_DESC pDesc
        );
    void GetInstanceName(
        char* pInstanceName,
        ref size_t pBufferLength
        );
    void GetTypeName(
        char* pTypeName,
        ref size_t pBufferLength
        );
}


mixin(DX_DECLARE_IID("ID3D11ClassLinkage", "DDF57CBA-9543-46E4-A12B-F207A0FE7FED"));
interface ID3D11ClassLinkage : ID3D11DeviceChild
{
extern(Windows):
    HRESULT GetClassInstance(
        in char* pClassInstanceName,
        uint InstanceIndex,
        out ID3D11ClassInstance ppInstance
        );
    HRESULT CreateClassInstance(
        in char* pClassTypeName,
        uint ConstantBufferOffset,
        uint ConstantVectorOffset,
        uint TextureOffset,
        uint SamplerOffset,
        out ID3D11ClassInstance ppInstance
        );
}


mixin(DX_DECLARE_IID("ID3D11CommandList", "A24BC4D1-769E-43F7-8013-98FF566C18E2"));
interface ID3D11CommandList : ID3D11DeviceChild
{
extern(Windows):
    uint GetContextFlags(
        );
}


mixin(DX_DECLARE_IID("ID3D11DeviceContext", "C0BFA96C-E089-44FB-8EAF-26F8796190DA"));
interface ID3D11DeviceContext : ID3D11DeviceChild
{
extern(Windows):
    void VSSetConstantBuffers(
        uint StartSlot,
        uint NumBuffers,
        ID3D11Buffer* ppConstantBuffersCArray
        );
    void PSSetShaderResources(
        uint StartSlot,
        uint NumViews,
        ID3D11ShaderResourceView* ppShaderResourceViewsCArray
        );
    void PSSetShader(
        /*optional*/ ID3D11PixelShader pPixelShader,
        /*optional*/ ID3D11ClassInstance* ppClassInstancesCArray,
        uint NumClassInstances
        );
    void PSSetSamplers(
        uint StartSlot,
        uint NumSamplers,
        ID3D11SamplerState* ppSamplersCArray
        );
    void VSSetShader(
        /*optional*/ ID3D11VertexShader pVertexShader,
        /*optional*/ ID3D11ClassInstance* ppClassInstancesCArray,
        uint NumClassInstances
        );
    void DrawIndexed(
        uint IndexCount,
        uint StartIndexLocation,
        int BaseVertexLocation
        );
    void Draw(
        uint VertexCount,
        uint StartVertexLocation
        );
    HRESULT Map(
        ID3D11Resource pResource,
        uint Subresource,
        D3D11_MAP MapType,
        uint MapFlags,
        out D3D11_MAPPED_SUBRESOURCE pMappedResource
        );
    void Unmap(
        ID3D11Resource pResource,
        uint Subresource
        );
    void PSSetConstantBuffers(
        uint StartSlot,
        uint NumBuffers,
        ID3D11Buffer* ppConstantBuffersCArray
        );
    void IASetInputLayout(
        /*optional*/ ID3D11InputLayout pInputLayout
        );
    void IASetVertexBuffers(
        uint StartSlot,
        uint NumBuffers,
        in ID3D11Buffer* ppVertexBuffersCArray,
        in uint* pStrides,
        in uint* pOffsets
        );
    void IASetIndexBuffer(
        /*optional*/ ID3D11Buffer pIndexBuffer,
        DXGI_FORMAT Format,
        uint Offset
        );
    void DrawIndexedInstanced(
        uint IndexCountPerInstance,
        uint InstanceCount,
        uint StartIndexLocation,
        int BaseVertexLocation,
        uint StartInstanceLocation
        );
    void DrawInstanced(
        uint VertexCountPerInstance,
        uint InstanceCount,
        uint StartVertexLocation,
        uint StartInstanceLocation
        );
    void GSSetConstantBuffers(
        uint StartSlot,
        uint NumBuffers,
        ID3D11Buffer* ppConstantBuffersCArray
        );
    void GSSetShader(
        /*optional*/ ID3D11GeometryShader pShader,
        /*optional*/ ID3D11ClassInstance* ppClassInstancesCArray,
        uint NumClassInstances
        );
    void IASetPrimitiveTopology(
        D3D11_PRIMITIVE_TOPOLOGY Topology
        );
    void VSSetShaderResources(
        uint StartSlot,
        uint NumViews,
        ID3D11ShaderResourceView* ppShaderResourceViewsCArray
        );
    void VSSetSamplers(
        uint StartSlot,
        uint NumSamplers,
        ID3D11SamplerState* ppSamplersCArray
        );
    void Begin(
        ID3D11Asynchronous pAsync
        );
    void End(
        ID3D11Asynchronous pAsync
        );
    HRESULT GetData(
        ID3D11Asynchronous pAsync,
        void* pData,
        uint DataSize,
        uint GetDataFlags
        );
    void SetPredication(
        /*optional*/ ID3D11Predicate pPredicate,
        BOOL PredicateValue
        );
    void GSSetShaderResources(
        uint StartSlot,
        uint NumViews,
        ID3D11ShaderResourceView* ppShaderResourceViewsCArray
        );
    void GSSetSamplers(
        uint StartSlot,
        uint NumSamplers,
        ID3D11SamplerState* ppSamplersCArray
        );
    void OMSetRenderTargets(
        uint NumViews,
        /*optional*/ ID3D11RenderTargetView* ppRenderTargetViewsCArray,
        /*optional*/ ID3D11DepthStencilView pDepthStencilView
        );
    void OMSetRenderTargetsAndUnorderedAccessViews(
        uint NumRTVs,
        /*optional*/ ID3D11RenderTargetView* ppRenderTargetViewsCArray,
        /*optional*/ ID3D11DepthStencilView pDepthStencilView,
        uint UAVStartSlot,
        uint NumUAVs,
        ID3D11UnorderedAccessView* ppUnorderedAccessViewsCArray,
        in uint* pUAVInitialCounts
        );
    void OMSetBlendState(
        /*optional*/ ID3D11BlendState pBlendState,
        in D3D11COLORVALUE* BlendFactor,
        uint SampleMask
        );
    void OMSetDepthStencilState(
        /*optional*/ ID3D11DepthStencilState pDepthStencilState,
        uint StencilRef
        );
    void SOSetTargets(
        uint NumBuffers,
        /*optional*/ ID3D11Buffer* ppSOTargetsCArray,
        /*optional*/ in uint* pOffsetsCArray
        );
    void DrawAuto(
        );
    void DrawIndexedInstancedIndirect(
        ID3D11Buffer pBufferForArgs,
        uint AlignedByteOffsetForArgs
        );
    void DrawInstancedIndirect(
        ID3D11Buffer pBufferForArgs,
        uint AlignedByteOffsetForArgs
        );
    void Dispatch(
        uint ThreadGroupCountX,
        uint ThreadGroupCountY,
        uint ThreadGroupCountZ
        );
    void DispatchIndirect(
        ID3D11Buffer pBufferForArgs,
        uint AlignedByteOffsetForArgs
        );
    void RSSetState(
        /*optional*/ ID3D11RasterizerState pRasterizerState
        );
    void RSSetViewports(
        uint NumViewports,
        in D3D11_VIEWPORT* pViewportsCArray
        );
    void RSSetScissorRects(
        uint NumRects,
        in D3D11_RECT* pRectsCArray
        );
    void CopySubresourceRegion(
        ID3D11Resource pDstResource,
        uint DstSubresource,
        uint DstX,
        uint DstY,
        uint DstZ,
        ID3D11Resource pSrcResource,
        uint SrcSubresource,
        /*optional*/ in D3D11_BOX* pSrcBox
        );
    void CopyResource(
        ID3D11Resource pDstResource,
        ID3D11Resource pSrcResource
        );
    void UpdateSubresource(
        ID3D11Resource pDstResource,
        uint DstSubresource,
        /*optional*/ in D3D11_BOX* pDstBoxCArray,
        in void* pSrcData,
        uint SrcRowPitch,
        uint SrcDepthPitch
        );
    void CopyStructureCount(
        ID3D11Buffer pDstBuffer,
        uint DstAlignedByteOffset,
        ID3D11UnorderedAccessView pSrcView
        );
    void ClearRenderTargetView(
        ID3D11RenderTargetView pRenderTargetView,
        in D3D11COLORVALUE* ColorRGBA
        );
    void ClearUnorderedAccessViewUint(
        ID3D11UnorderedAccessView pUnorderedAccessView,
        in D3D11COLORVALUE* Values
        );
    void ClearUnorderedAccessViewFloat(
        ID3D11UnorderedAccessView pUnorderedAccessView,
        in D3D11COLORVALUE* Values
        );
    void ClearDepthStencilView(
        ID3D11DepthStencilView pDepthStencilView,
        uint ClearFlags,
        float Depth,
        ubyte Stencil
        );
    void GenerateMips(
        ID3D11ShaderResourceView pShaderResourceView
        );
    void SetResourceMinLOD(
        ID3D11Resource pResource,
        float MinLOD
        );
    float GetResourceMinLOD(
        ID3D11Resource pResource
        );
    void ResolveSubresource(
        ID3D11Resource pDstResource,
        uint DstSubresource,
        ID3D11Resource pSrcResource,
        uint SrcSubresource,
        DXGI_FORMAT Format
        );
    void ExecuteCommandList(
        ID3D11CommandList pCommandList,
        BOOL RestoreContextState
        );
    void HSSetShaderResources(
        uint StartSlot,
        uint NumViews,
        ID3D11ShaderResourceView* ppShaderResourceViewsCArray
        );
    void HSSetShader(
        /*optional*/ ID3D11HullShader pHullShader,
        /*optional*/ ID3D11ClassInstance* ppClassInstancesCArray,
        uint NumClassInstances
        );
    void HSSetSamplers(
        uint StartSlot,
        uint NumSamplers,
        ID3D11SamplerState* ppSamplersCArray
        );
    void HSSetConstantBuffers(
        uint StartSlot,
        uint NumBuffers,
        ID3D11Buffer* ppConstantBuffersCArray
        );
    void DSSetShaderResources(
        uint StartSlot,
        uint NumViews,
        ID3D11ShaderResourceView* ppShaderResourceViewsCArray
        );
    void DSSetShader(
        /*optional*/ ID3D11DomainShader pDomainShader,
        /*optional*/ in ID3D11ClassInstance* ppClassInstancesCArray,
        uint NumClassInstances
        );
    void DSSetSamplers(
        uint StartSlot,
        uint NumSamplers,
        ID3D11SamplerState* ppSamplersCArray
        );
    void DSSetConstantBuffers(
        uint StartSlot,
        uint NumBuffers,
        ID3D11Buffer* ppConstantBuffersCArray
        );
    void CSSetShaderResources(
        uint StartSlot,
        uint NumViews,
        ID3D11ShaderResourceView* ppShaderResourceViewsCArray
        );
    void CSSetUnorderedAccessViews(
        uint StartSlot,
        uint NumUAVs,
        in ID3D11UnorderedAccessView* ppUnorderedAccessViewsCArray,
        in uint* pUAVInitialCountsCArray
        );
    void CSSetShader(
        /*optional*/ ID3D11ComputeShader pComputeShader,
        /*optional*/ ID3D11ClassInstance* ppClassInstancesCArray,
        uint NumClassInstances
        );
    void CSSetSamplers(
        uint StartSlot,
        uint NumSamplers,
        ID3D11SamplerState* ppSamplersCArray
        );
    void CSSetConstantBuffers(
        uint StartSlot,
        uint NumBuffers,
        ID3D11Buffer* ppConstantBuffersCArray
        );
    void VSGetConstantBuffers(
        uint StartSlot,
        uint NumBuffers,
        ID3D11Buffer* ppConstantBuffersCArray
        );
    void PSGetShaderResources(
        uint StartSlot,
        uint NumViews,
        ID3D11ShaderResourceView* ppShaderResourceViewsCArray
        );
    void PSGetShader(
        out ID3D11PixelShader ppPixelShader,
        /*optional*/ ID3D11ClassInstance* ppClassInstancesCArray,
        /*optional*/ uint* pNumClassInstances
        );
    void PSGetSamplers(
        uint StartSlot,
        uint NumSamplers,
        ID3D11SamplerState* ppSamplersCArray
        );
    void VSGetShader(
        out ID3D11VertexShader ppVertexShader,
        /*optional*/ ID3D11ClassInstance* ppClassInstancesCArray,
        /*optional*/ uint* pNumClassInstances
        );
    void PSGetConstantBuffers(
        uint StartSlot,
        uint NumBuffers,
        ID3D11Buffer* ppConstantBuffersCArray
        );
    void IAGetInputLayout(
        out ID3D11InputLayout ppInputLayout
        );
    void IAGetVertexBuffers(
        uint StartSlot,
        uint NumBuffers,
        /*optional*/ ID3D11Buffer* ppVertexBuffersCArray,
        /*optional*/ uint* pStridesCArray,
        /*optional*/ uint* pOffsetsCArray
        );
    void IAGetIndexBuffer(
        out ID3D11Buffer pIndexBuffer,
        /*optional*/ DXGI_FORMAT* Format,
        /*optional*/ uint* Offset
        );
    void GSGetConstantBuffers(
        uint StartSlot,
        uint NumBuffers,
        ID3D11Buffer* ppConstantBuffersCArray
        );
    void GSGetShader(
        out ID3D11GeometryShader ppGeometryShader,
        /*optional*/ ID3D11ClassInstance* ppClassInstancesCArray,
        /*optional*/ uint* pNumClassInstances
        );
    void IAGetPrimitiveTopology(
        out D3D11_PRIMITIVE_TOPOLOGY pTopology
        );
    void VSGetShaderResources(
        uint StartSlot,
        uint NumViews,
        ID3D11ShaderResourceView* ppShaderResourceViewsCArray
        );
    void VSGetSamplers(
        uint StartSlot,
        uint NumSamplers,
        ID3D11SamplerState* ppSamplersCArray
        );
    void GetPredication(
        out ID3D11Predicate ppPredicate,
        out BOOL pPredicateValue
        );
    void GSGetShaderResources(
        uint StartSlot,
        uint NumViews,
        ID3D11ShaderResourceView* ppShaderResourceViews
        );
    void GSGetSamplers(
        uint StartSlot,
        uint NumSamplers,
        ID3D11SamplerState* ppSamplersCArray
        );
    void OMGetRenderTargets(
        uint NumViews,
        /*optional*/ ID3D11RenderTargetView* ppRenderTargetViewsCArray,
        /*optional*/ ID3D11DepthStencilView* ppDepthStencilView
        );
    void OMGetRenderTargetsAndUnorderedAccessViews(
        uint NumRTVs,
        /*optional*/ ID3D11RenderTargetView* ppRenderTargetViewsCArray,
        /*optional*/ ID3D11DepthStencilView* ppDepthStencilView,
        uint UAVStartSlot,
        uint NumUAVs,
        /*optional*/ ID3D11UnorderedAccessView* ppUnorderedAccessViewsCArray
        );
    void OMGetBlendState(
        out ID3D11BlendState ppBlendState,
        ref D3D11COLORVALUE BlendFactor,
        uint* pSampleMask
        );
    void OMGetDepthStencilState(
        out ID3D11DepthStencilState ppDepthStencilState,
        out uint pStencilRef
        );
    void SOGetTargets(
        uint NumBuffers,
        ID3D11Buffer* ppSOTargetsCArray
        );
    void RSGetState(
        out ID3D11RasterizerState ppRasterizerState
        );
    void RSGetViewports(
        ref uint pNumViewports,
        /*optional*/ D3D11_VIEWPORT* pViewportsCArray
        );
    void RSGetScissorRects(
        ref uint pNumRects,
        /*optional*/ D3D11_RECT* pRectsCArray
        );
    void HSGetShaderResources(
        uint StartSlot,
        uint NumViews,
        ID3D11ShaderResourceView* ppShaderResourceViewsCArray
        );
    void HSGetShader(
        out ID3D11HullShader ppHullShader,
        /*optional*/ ID3D11ClassInstance* ppClassInstancesCArray,
        /*optional*/ ref uint pNumClassInstancesCArray
        );
    void HSGetSamplers(
        uint StartSlot,
        uint NumSamplers,
        ID3D11SamplerState* ppSamplersCArray
        );
    void HSGetConstantBuffers(
        uint StartSlot,
        uint NumBuffers,
        ID3D11Buffer* ppConstantBuffersCArray
        );
    void DSGetShaderResources(
        uint StartSlot,
        uint NumViews,
        ID3D11ShaderResourceView* ppShaderResourceViewsCArray
        );
    void DSGetShader(
        out ID3D11DomainShader ppDomainShader,
        /*optional*/ ID3D11ClassInstance* ppClassInstancesCArray,
        /*optional*/ ref uint pNumClassInstances
        );
    void DSGetSamplers(
        uint StartSlot,
        uint NumSamplers,
        ID3D11SamplerState* ppSamplersCArray
        );
    void DSGetConstantBuffers(
        uint StartSlot,
        uint NumBuffers,
        ID3D11Buffer* ppConstantBuffersCArray
        );
    void CSGetShaderResources(
        uint StartSlot,
        uint NumViews,
        ID3D11ShaderResourceView* ppShaderResourceViewsCArray
        );
    void CSGetUnorderedAccessViews(
        uint StartSlot,
        uint NumUAVs,
        ID3D11UnorderedAccessView* ppUnorderedAccessViewsCArray
        );
    void CSGetShader(
        out ID3D11ComputeShader ppComputeShader,
        /*optional*/ ID3D11ClassInstance* ppClassInstancesCArray,
        /*optional*/ ref uint pNumClassInstances
        );
    void CSGetSamplers(
        uint StartSlot,
        uint NumSamplers,
        ID3D11SamplerState* ppSamplersCArray
        );
    void CSGetConstantBuffers(
        uint StartSlot,
        uint NumBuffers,
        ID3D11Buffer* ppConstantBuffersCArray
        );
    void ClearState(
        );
    void Flush(
        );
    D3D11_DEVICE_CONTEXT_TYPE GetType(
        );
    uint GetContextFlags(
        );
    HRESULT FinishCommandList(
        BOOL RestoreDeferredContextState,
        out ID3D11CommandList ppCommandList
        );
}


mixin(DX_DECLARE_IID("ID3D11Device", "DB6F6DDB-AC77-4E88-8253-819DF9BBF140"));
interface ID3D11Device : std.c.windows.com.IUnknown
{
extern(Windows):
    HRESULT CreateBuffer(
        in D3D11_BUFFER_DESC* pDesc,
        in D3D11_SUBRESOURCE_DATA* pInitialData,
        out ID3D11Buffer ppBuffer
        );
    HRESULT CreateTexture1D(
        in D3D11_TEXTURE1D_DESC* pDesc,
        in D3D11_SUBRESOURCE_DATA* pInitialData,
        out ID3D11Texture1D ppTexture1D
        );
    HRESULT CreateTexture2D(
        in D3D11_TEXTURE2D_DESC* pDesc,
        in D3D11_SUBRESOURCE_DATA* pInitialData,
        out ID3D11Texture2D ppTexture2D
        );
    HRESULT CreateTexture3D(
        in D3D11_TEXTURE3D_DESC* pDesc,
        in D3D11_SUBRESOURCE_DATA* pInitialData,
        out ID3D11Texture3D ppTexture3D
        );
    HRESULT CreateShaderResourceView(
        ID3D11Resource pResource,
        in D3D11_SHADER_RESOURCE_VIEW_DESC* pDesc,
        out ID3D11ShaderResourceView ppSRView
        );
    HRESULT CreateUnorderedAccessView(
        ID3D11Resource pResource,
        in D3D11_UNORDERED_ACCESS_VIEW_DESC* pDesc,
        out ID3D11UnorderedAccessView ppUAView
        );
    HRESULT CreateRenderTargetView(
        ID3D11Resource pResource,
        in D3D11_RENDER_TARGET_VIEW_DESC* pDesc,
        out ID3D11RenderTargetView ppRTView
        );
    HRESULT CreateDepthStencilView(
        ID3D11Resource pResource,
        in D3D11_DEPTH_STENCIL_VIEW_DESC* pDesc,
        out ID3D11DepthStencilView ppDepthStencilView
        );
    HRESULT CreateInputLayout(
        in D3D11_INPUT_ELEMENT_DESC* pInputElementDescsCArray,
        uint NumElements,
        in void* pShaderBytecodeWithInputSignature,
        size_t BytecodeLength,
        out ID3D11InputLayout ppInputLayout
        );
    HRESULT CreateVertexShader(
        in void* pShaderBytecode,
        size_t BytecodeLength,
        ID3D11ClassLinkage pClassLinkage,
        out ID3D11VertexShader ppVertexShader
        );
    HRESULT CreateGeometryShader(
        in void* pShaderBytecode,
        size_t BytecodeLength,
        /*optional*/ ID3D11ClassLinkage pClassLinkage,
        out ID3D11GeometryShader ppGeometryShader
        );
    HRESULT CreateGeometryShaderWithStreamOutput(
        in void* pShaderBytecode,
        size_t BytecodeLength,
        in D3D11_SO_DECLARATION_ENTRY* pSODeclarationCArray,
        uint NumEntries,
        in uint* pBufferStridesCArray,
        uint NumStrides,
        uint RasterizedStream,
        /*optional*/ ID3D11ClassLinkage pClassLinkage,
        out ID3D11GeometryShader ppGeometryShader
        );
    HRESULT CreatePixelShader(
        in void* pShaderBytecode,
        size_t BytecodeLength,
        ID3D11ClassLinkage pClassLinkage,
        out ID3D11PixelShader ppPixelShader
        );
    HRESULT CreateHullShader(
        in void* pShaderBytecode,
        size_t BytecodeLength,
        ID3D11ClassLinkage pClassLinkage,
        out ID3D11HullShader ppHullShader
        );
    HRESULT CreateDomainShader(
        in void* pShaderBytecode,
        size_t BytecodeLength,
        ID3D11ClassLinkage pClassLinkage,
        out ID3D11DomainShader ppDomainShader
        );
    HRESULT CreateComputeShader(
        in void* pShaderBytecode,
        size_t BytecodeLength,
        ID3D11ClassLinkage pClassLinkage,
        out ID3D11ComputeShader ppComputeShader
        );
    HRESULT CreateClassLinkage(
        out ID3D11ClassLinkage ppLinkage
        );
    HRESULT CreateBlendState(
        in D3D11_BLEND_DESC* pBlendStateDesc,
        out ID3D11BlendState ppBlendState
        );
    HRESULT CreateDepthStencilState(
        in D3D11_DEPTH_STENCIL_DESC* pDepthStencilDesc,
        out ID3D11DepthStencilState ppDepthStencilState
        );
    HRESULT CreateRasterizerState(
        in D3D11_RASTERIZER_DESC* pRasterizerDesc,
        out ID3D11RasterizerState ppRasterizerState
        );
    HRESULT CreateSamplerState(
        in D3D11_SAMPLER_DESC* pSamplerDesc,
        out ID3D11SamplerState ppSamplerState
        );
    HRESULT CreateQuery(
        in D3D11_QUERY_DESC* pQueryDesc,
        out ID3D11Query ppQuery
        );
    HRESULT CreatePredicate(
        in D3D11_QUERY_DESC* pPredicateDesc,
        out ID3D11Predicate ppPredicate
        );
    HRESULT CreateCounter(
        in D3D11_COUNTER_DESC* pCounterDesc,
        out ID3D11Counter ppCounter
        );
    HRESULT CreateDeferredContext(
        uint ContextFlags,
        out ID3D11DeviceContext ppDeferredContext
        );
    HRESULT OpenSharedResource(
        HANDLE hResource,
        IID* ReturnedInterface,
        void** ppResource
        );
    HRESULT CheckFormatSupport(
        DXGI_FORMAT Format,
        uint* pFormatSupport
        );
    HRESULT CheckMultisampleQualityLevels(
        DXGI_FORMAT Format,
        uint SampleCount,
        uint* pNumQualityLevels
        );
    void CheckCounterInfo(
        D3D11_COUNTER_INFO* pCounterInfo
        );
    HRESULT CheckCounter(
        in D3D11_COUNTER_DESC* pDesc,
        out D3D11_COUNTER_TYPE pType,
        out uint pActiveCounters,
        /*optional*/ char* szName,
        /*optional*/ uint* pNameLength,
        /*optional*/ char* szUnits,
        /*optional*/ uint* pUnitsLength,
        /*optional*/ char* szDescription,
        /*optional*/ uint* pDescriptionLength
        );
    HRESULT CheckFeatureSupport(
        D3D11_FEATURE Feature,
        void* pFeatureSupportData,
        uint FeatureSupportDataSize
        );
    HRESULT GetPrivateData(
        GUID* guid,
        ref uint pDataSize,
        void* pData
        );
    HRESULT SetPrivateData(
        GUID* guid,
        uint DataSize,
        in void* pData
        );
    HRESULT SetPrivateDataInterface(
        GUID* guid,
        IUnknown pData
        );
    D3D11_FEATURE_LEVEL GetFeatureLevel(
        );
    uint GetCreationFlags(
        );
    HRESULT GetDeviceRemovedReason(
        );
    void GetImmediateContext(
        out ID3D11DeviceContext ppImmediateContext
        );
    HRESULT SetExceptionMode(
        uint RaiseFlags
        );
    uint GetExceptionMode(
        );
}


mixin(DX_DECLARE_IID("ID3D11Debug", "79CF2233-7536-4948-9D36-1E4692DC5760"));
interface ID3D11Debug : IUnknown
{
extern(Windows):
    HRESULT SetFeatureMask( 
        uint Mask
        );
        
    uint GetFeatureMask(
        );
        
    HRESULT SetPresentPerRenderOpDelay( 
        uint Milliseconds
        );
        
    uint GetPresentPerRenderOpDelay(
        );
        
    HRESULT SetSwapChain( 
        IDXGISwapChain pSwapChain
        );
        
    HRESULT GetSwapChain( 
        out  IDXGISwapChain ppSwapChain
        );
        
    HRESULT ValidateContext( 
        ID3D11DeviceContext pContext
        );
        
    HRESULT ReportLiveDeviceObjects( 
        D3D11_RLDO_FLAGS Flags
        );
        
    HRESULT ValidateContextForDispatch( 
        ID3D11DeviceContext pContext
        );
};

extern(Windows)
{
HRESULT D3D11CreateDevice(
    IDXGIAdapter pAdapter,
    D3D11_DRIVER_TYPE DriverType,
    HMODULE Software,
    uint Flags,
    in D3D11_FEATURE_LEVEL* pFeatureLevels,
    uint FeatureLevels,
    uint SDKVersion,
    out ID3D11Device ppDevice,
    D3D11_FEATURE_LEVEL* pFeatureLevel,
    ID3D11DeviceContext* ppImmediateContext
    );
    
HRESULT D3D11CreateDeviceAndSwapChain(
    IDXGIAdapter pAdapter,
    D3D11_DRIVER_TYPE DriverType,
    HMODULE Software,
    uint Flags,
    in D3D11_FEATURE_LEVEL* pFeatureLevels,
    uint FeatureLevels,
    uint SDKVersion,
    in DXGI_SWAP_CHAIN_DESC* pSwapChainDesc,
    out IDXGISwapChain ppSwapChain,
    out ID3D11Device ppDevice,
    D3D11_FEATURE_LEVEL* pFeatureLevel,
    ID3D11DeviceContext* ppImmediateContext
    );
}


